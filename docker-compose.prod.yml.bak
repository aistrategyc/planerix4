version: '3.8'

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  caddy_data:
  caddy_config:

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: liderix-postgres
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-liderixapp}
      POSTGRES_USER: ${POSTGRES_USER:-manfromlamp}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-lashd87123kKJSDAH81}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-manfromlamp} -d ${POSTGRES_DB:-liderixapp}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: liderix-redis
    restart: unless-stopped
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # FastAPI Backend
    api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: liderix-api
    restart: unless-stopped
    env_file:
      - ./apps/api/.env.production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    expose:
      - "8001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s


  # Next.js Web Enterprise
  web:
    build:
      context: ./apps/web-enterprise
      dockerfile: Dockerfile
    container_name: liderix-web
    restart: unless-stopped
    env_file:
      - ./apps/web-enterprise/.env.production
    environment:
      - INTERNAL_API_URL=http://api:8001/api
    depends_on:
      api:
        condition: service_healthy
    networks:
      - app-network
    expose:
      - "3000"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000", ">/dev/null", "2>&1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Landing Page
  landing:
    build:
      context: ./apps/planerix
      dockerfile: Dockerfile
    container_name: planerix-landing
    restart: unless-stopped
    env_file:
      - ./apps/planerix/.env.production
    networks:
      - app-network
    expose:
      - "3000"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000", ">/dev/null", "2>&1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Caddy Reverse Proxy with Auto-SSL
  caddy:
    image: caddy:2-alpine
    container_name: liderix-caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Health check
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
      - ./logs:/var/log/caddy
    depends_on:
      web:
        condition: service_healthy
      landing:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - app-network
    environment:
      - CADDY_INGRESS_NETWORKS=app-network
