services:
  postgres:
    image: postgres:14
    container_name: db-postgres
    restart: unless-stopped
    env_file:
      - .env.postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: cache-redis
    restart: unless-stopped
    command: ["redis-server","--save","","--appendonly","no"]
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 10

  backend:
    container_name: api-backend
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - ./apps/api/.env.docker
    environment:
      # переопределим URL на сервис redis (а не localhost)
      REDIS_URL: redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8001:8001"
    stdin_open: true
    tty: true
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python - <<'PY'
          import sys, urllib.request
          try:
              r = urllib.request.urlopen('http://localhost:8001/api/health', timeout=3)
              sys.exit(0 if r.getcode() < 400 else 1)
          except Exception:
              sys.exit(1)
          PY
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 20s
  frontend:
    container_name: web-enterprise
    build:
      context: ./apps/web-enterprise
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_API_PREFIX: ${NEXT_PUBLIC_API_PREFIX}
        NEXT_PUBLIC_AI_AGENT_WEBHOOK_URL: ${NEXT_PUBLIC_AI_AGENT_WEBHOOK_URL}
    restart: unless-stopped
    env_file:
      - ./apps/web-enterprise/.env.local
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "3002:3000"          # web-enterprise на :3002
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3000 >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  landing:
    container_name: planerix-landing
    build:
      context: ./apps/planerix
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_API_PREFIX: ${NEXT_PUBLIC_API_PREFIX}
        RESEND_API_KEY: ${RESEND_API_KEY}
        RESEND_FROM: ${RESEND_FROM}
        CONTACT_TO: ${CONTACT_TO}
    restart: unless-stopped
    env_file:
      - ./apps/planerix/.env.local   # можешь убрать, если всё есть в корневом .env
    environment:
      - RESEND_API_KEY=${RESEND_API_KEY}
      - RESEND_FROM=${RESEND_FROM}
      - CONTACT_TO=${CONTACT_TO}
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "3001:3000"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3000 >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

volumes:
  postgres_data: