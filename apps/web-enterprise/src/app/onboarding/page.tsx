'use client'

import { useEffect, useMemo, useState } from 'react'
import { api } from '@/lib/api/config'
import { useRouter } from 'next/navigation'
import { OnboardingAPI } from '@/lib/api/onboarding'
import type { OrganizationCreatePayload, InviteItem } from '@/types/onboarding'
import { getOrganizations } from '@/lib/api/profile'
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from '@/components/ui/select'
import { Label } from '@/components/ui/label'
import { Separator } from '@/components/ui/separator'
import { useToast } from '@/components/ui/use-toast'
import { cn } from '@/lib/utils'
import ProtectedRoute from "@/components/auth/ProtectedRoute"

type StepKey = 'company' | 'prefs' | 'team' | 'departments' | 'review'

const steps: { key: StepKey; title: string }[] = [
  { key: 'company', title: '–ö–æ–º–ø–∞–Ω–∏—è' },
  { key: 'prefs', title: '–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è' },
  { key: 'team', title: '–ö–æ–º–∞–Ω–¥–∞' },
  { key: 'departments', title: '–û—Ç–¥–µ–ª—ã' },
  { key: 'review', title: '–û–±–∑–æ—Ä' },
]

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ slug (–∫–∞–∫ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ)
function generateSlug(name: string): string {
  return name
    .toLowerCase()
    .trim()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/^-+|-+$/g, '')
    .substring(0, 80)
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è email
const validateEmail = (email: string) => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
  return emailRegex.test(email)
}

function OnboardingPageContentContent() {
  const router = useRouter()
  const { toast } = useToast()

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    ;(async () => {
      try {
        const orgs = await getOrganizations()
        if (Array.isArray(orgs) && orgs.length > 0) {
          router.replace('/dashboard')
        }
      } catch {}
    })()
  }, [router])

  const [active, setActive] = useState<StepKey>('company')
  const [saving, setSaving] = useState(false)
  const [orgId, setOrgId] = useState<string | null>(null)
  const [finishing, setFinishing] = useState(false)

  const [company, setCompany] = useState<OrganizationCreatePayload>({
    name: '',
    description: '',
    industry: undefined,
    size: 'small',
    address: { 
      country: 'PL',
      city: '',
      line1: '',
      line2: '',
      region: '',
      postal_code: ''
    },
    preferences: { 
      currency: 'PLN', 
      locale: 'ru-RU', 
      week_start: 'monday',
      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone || 'Europe/Warsaw'
    },
    custom_fields: {}
  })

  const [invites, setInvites] = useState<InviteItem[]>([])
  const [departments, setDepartments] = useState<{ name: string; description?: string }[]>([])

  const currentIndex = useMemo(() => steps.findIndex(s => s.key === active), [active])
  const progress = Math.round(((currentIndex + 1) / steps.length) * 100)

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  const previewSlug = useMemo(() => 
    company.name ? generateSlug(company.name) : '', 
    [company.name]
  )

  const canNext = useMemo(() => {
    if (active === 'company') {
      return company.name.trim().length >= 2 && company.name.trim().length <= 150 && !saving
    }
    if (active === 'team') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ email –≤–∞–ª–∏–¥–Ω—ã
      const hasInvalidEmails = invites.some(invite => 
        invite.email.trim() && !validateEmail(invite.email.trim())
      )
      return !hasInvalidEmails && !saving
    }
    return !saving
  }, [active, company.name, invites, saving])

  const next = () => setActive(steps[Math.min(currentIndex + 1, steps.length - 1)].key)
  const back = () => setActive(steps[Math.max(currentIndex - 1, 0)].key)

  const handleCreateOrgIfNeeded = async () => {
    if (orgId) return orgId
    setSaving(true)
    try {
      // ‚úÖ –ù–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –±—ç–∫–µ–Ω–¥ —Å–∞–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç owner_id
      
      // –°–æ–∑–¥–∞–µ–º payload —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ö–µ–º–µ organization.py
      const cleanPayload = {
        name: company.name.trim(),
        slug: generateSlug(company.name.trim()),
        description: company.description?.trim() || undefined,
        industry: company.industry || undefined,
        size: company.size || 'small',
        address: company.address && Object.values(company.address).some(v => v?.trim()) 
          ? company.address 
          : undefined,
        preferences: company.preferences || undefined,
        custom_fields: company.custom_fields || undefined
      }
      
      console.log('Sending organization payload:', JSON.stringify(cleanPayload, null, 2))
      const created = await OnboardingAPI.createOrganization(cleanPayload)
      setOrgId(created.id)
      return created.id
    } catch (e: any) {
      console.error('Organization creation error:', e)
      
      let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é'
      
      if (e?.response?.data) {
        const errorData = e.response.data
        
        if (Array.isArray(errorData.detail)) {
          const validationErrors = errorData.detail
            .map((err: any) => `${err.loc?.join('.')}: ${err.msg}`)
            .join(', ')
          errorMessage = `–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${validationErrors}`
        }
        else if (errorData.detail) {
          errorMessage = typeof errorData.detail === 'string' 
            ? errorData.detail 
            : errorData.detail.title || errorData.detail.detail || errorMessage
        }
        else if (e.response.status === 409) {
          errorMessage = '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
        }
        else if (e.response.status === 403) {
          errorMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'
        }
      }
      else if (e?.message) {
        errorMessage = e.message
      }
      
      toast({ title: '–û—à–∏–±–∫–∞', description: errorMessage, variant: 'destructive' })
      throw e
    } finally {
      setSaving(false)
    }
  }

  const handleFinish = async () => {
    if (finishing) return
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    if (company.name.trim().length < 2 || company.name.trim().length > 150) {
      toast({ 
        title: '–û—à–∏–±–∫–∞', 
        description: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 150 —Å–∏–º–≤–æ–ª–æ–≤',
        variant: 'destructive' 
      })
      return
    }

    setFinishing(true)
    try {
      const id = await handleCreateOrgIfNeeded()

      // –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã ‚Äî —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ
      const validDepartments = departments.filter(d => 
        d.name.trim().length >= 2 && d.name.trim().length <= 120
      )
      
      const deptPromises = validDepartments.map(d =>
        OnboardingAPI.createDepartment(id, {
          name: d.name.trim(),
          description: d.description?.trim() || undefined,
        })
      )
      await Promise.all(deptPromises)

      // –∏–Ω–≤–∞–π—Ç—ã ‚Äî —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ email
      const validInvites = invites.filter(i => 
        i.email.trim() && validateEmail(i.email.trim())
      )
      
      if (validInvites.length > 0) {
        await OnboardingAPI.bulkInvite(id, validInvites.map(i => ({
          ...i,
          email: i.email.trim()
        })))
      }

      toast({ title: '–ì–æ—Ç–æ–≤–æ', description: '–ü—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–∞–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ' })
      router.replace('/dashboard')
    } catch (error) {
      console.error('Onboarding completion error:', error)
    } finally {
      setFinishing(false)
    }
  }

  return (
    <div className="mx-auto max-w-3xl py-10 px-4">
      <div className="mb-8">
        <h1 className="text-2xl font-semibold">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üëã</h1>
        <p className="text-muted-foreground">–ü–∞—Ä—É —à–∞–≥–æ–≤ ‚Äî –∏ –≤—Å—ë –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ.</p>
      </div>

      {/* Progress */}
      <div className="mb-6">
        <div className="h-2 w-full rounded bg-muted">
          <div className="h-2 rounded bg-primary transition-all" style={{ width: `${progress}%` }} />
        </div>
        <div className="mt-3 flex items-center justify-between text-sm text-muted-foreground">
          {steps.map((s, i) => (
            <button
              key={s.key}
              className={cn(
                'hover:text-foreground transition-colors', 
                s.key === active ? 'text-foreground font-medium' : ''
              )}
              onClick={() => { if (!saving && !finishing) setActive(s.key) }}
            >
              {i + 1}. {s.title}
            </button>
          ))}
        </div>
      </div>

      <Card className="p-6">
        {active === 'company' && (
          <div className="space-y-5">
            <div>
              <Label>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ *</Label>
              <Input
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, Liderix Sp. z o.o."
                value={company.name}
                onChange={(e) => setCompany((v) => ({ ...v, name: e.target.value }))}
              />
              {company.name.trim().length > 150 && (
                <p className="mt-1 text-xs text-destructive">–ú–∞–∫—Å–∏–º—É–º 150 —Å–∏–º–≤–æ–ª–æ–≤</p>
              )}
            </div>

            {/* –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä slug */}
            {company.name && (
              <div className="rounded-md bg-muted p-3 text-sm">
                <div className="flex items-center gap-2">
                  <span className="text-muted-foreground">URL:</span>
                  <code className="font-mono text-xs bg-background px-2 py-1 rounded">
                    your-domain.com/org/{previewSlug}
                  </code>
                </div>
                {previewSlug !== company.name.toLowerCase() && (
                  <p className="mt-1 text-xs text-muted-foreground">
                    –ù–∞–∑–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ URL-–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                  </p>
                )}
              </div>
            )}

            <div>
              <Label>–û–ø–∏—Å–∞–Ω–∏–µ</Label>
              <Input
                placeholder="–ö–æ—Ä–æ—Ç–∫–æ –æ –∫–æ–º–ø–∞–Ω–∏–∏"
                value={company.description ?? ''}
                onChange={(e) => setCompany((v) => ({ ...v, description: e.target.value }))}
              />
            </div>

            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div>
                <Label>–ò–Ω–¥—É—Å—Ç—Ä–∏—è</Label>
                <Select
                  value={company.industry ?? undefined}
                  onValueChange={(val) =>
                    setCompany((v) => ({ ...v, industry: (val || undefined) as any }))
                  }
                >
                  <SelectTrigger>
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="it">IT</SelectItem>
                    <SelectItem value="marketing">–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥</SelectItem>
                    <SelectItem value="retail">–†–∏—Ç–µ–π–ª</SelectItem>
                    <SelectItem value="education">–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</SelectItem>
                    <SelectItem value="other">–î—Ä—É–≥–æ–µ</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label>–†–∞–∑–º–µ—Ä</Label>
                <Select
                  value={company.size ?? 'small'}
                  onValueChange={(val) => setCompany((v) => ({ ...v, size: (val || 'small') as any }))}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="small">–ú–∞–ª–µ–Ω—å–∫–∞—è (–¥–æ 50)</SelectItem>
                    <SelectItem value="medium">–°—Ä–µ–¥–Ω—è—è (50+)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è */}
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div>
                <Label>–í–µ–±-—Å–∞–π—Ç</Label>
                <Input
                  type="url"
                  placeholder="https://company.com"
                  value={company.custom_fields?.website ?? ''}
                  onChange={(e) => setCompany((v) => ({ 
                    ...v, 
                    custom_fields: { ...v.custom_fields, website: e.target.value }
                  }))}
                />
              </div>
              <div>
                <Label>–¢–µ–ª–µ—Ñ–æ–Ω</Label>
                <Input
                  type="tel"
                  placeholder="+48 123 456 789"
                  value={company.custom_fields?.phone ?? ''}
                  onChange={(e) => setCompany((v) => ({ 
                    ...v, 
                    custom_fields: { ...v.custom_fields, phone: e.target.value }
                  }))}
                />
              </div>
            </div>

            {/* ‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
            {saving && (
              <div className="flex items-center gap-2 text-sm text-muted-foreground p-3 bg-blue-50 rounded-lg border border-blue-200">
                <div className="h-4 w-4 animate-spin rounded-full border-2 border-blue-600 border-t-transparent" />
                <span>–°–æ–∑–¥–∞—ë–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é...</span>
              </div>
            )}

            <Separator />
            <div className="flex justify-between">
              <div />
              <Button
                disabled={!canNext}
                onClick={async () => {
                  await handleCreateOrgIfNeeded()
                  next()
                }}
              >
                {saving ? '–°–æ–∑–¥–∞—ë–º...' : '–î–∞–ª–µ–µ'}
              </Button>
            </div>
          </div>
        )}

        {active === 'prefs' && (
          <div className="space-y-5">
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div>
                <Label>–í–∞–ª—é—Ç–∞</Label>
                <Select
                  value={company.preferences?.currency ?? 'PLN'}
                  onValueChange={(val) =>
                    setCompany((v) => ({ ...v, preferences: { ...(v.preferences || {}), currency: val as any } }))
                  }
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="PLN">PLN</SelectItem>
                    <SelectItem value="EUR">EUR</SelectItem>
                    <SelectItem value="USD">USD</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label>–Ø–∑—ã–∫</Label>
                <Select
                  value={company.preferences?.locale ?? 'ru-RU'}
                  onValueChange={(val) =>
                    setCompany((v) => ({ ...v, preferences: { ...(v.preferences || {}), locale: val as any } }))
                  }
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="ru-RU">–†—É—Å—Å–∫–∏–π</SelectItem>
                    <SelectItem value="en-US">English</SelectItem>
                    <SelectItem value="pl-PL">Polski</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å</Label>
                <Input
                  placeholder="Europe/Warsaw"
                  value={company.preferences?.timezone ?? ''}
                  onChange={(e) =>
                    setCompany((v) => ({ ...v, preferences: { ...(v.preferences || {}), timezone: e.target.value } }))
                  }
                />
              </div>
              <div>
                <Label>–ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏</Label>
                <Select
                  value={company.preferences?.week_start ?? 'monday'}
                  onValueChange={(val) =>
                    setCompany((v) => ({ ...v, preferences: { ...(v.preferences || {}), week_start: val as any } }))
                  }
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="monday">–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫</SelectItem>
                    <SelectItem value="sunday">–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <Separator />
            <div className="flex justify-between">
              <Button variant="ghost" onClick={back}>–ù–∞–∑–∞–¥</Button>
              <Button onClick={next}>–î–∞–ª–µ–µ</Button>
            </div>
          </div>
        )}

        {active === 'team' && (
          <div className="space-y-5">
            <p className="text-sm text-muted-foreground">
              –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –∫–æ–ª–ª–µ–≥ (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).
            </p>
            <div className="space-y-3">
              {invites.map((i, idx) => (
                <div key={idx} className="grid grid-cols-1 sm:grid-cols-3 gap-3">
                  <div>
                    <Input
                      placeholder="email@company.com"
                      value={i.email}
                      onChange={(e) => {
                        const v = [...invites]
                        v[idx] = { ...v[idx], email: e.target.value }
                        setInvites(v)
                      }}
                      className={cn(
                        i.email.trim() && !validateEmail(i.email.trim()) 
                          ? 'border-destructive' 
                          : ''
                      )}
                    />
                    {i.email.trim() && !validateEmail(i.email.trim()) && (
                      <p className="mt-1 text-xs text-destructive">–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email</p>
                    )}
                  </div>
                  <Select
                    value={i.role}
                    onValueChange={(val) => {
                      const v = [...invites]
                      v[idx] = { ...v[idx], role: val as any }
                      setInvites(v)
                    }}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="viewer">–ó—Ä–∏—Ç–µ–ª—å</SelectItem>
                      <SelectItem value="member">–£—á–∞—Å—Ç–Ω–∏–∫</SelectItem>
                      <SelectItem value="admin">–ê–¥–º–∏–Ω</SelectItem>
                    </SelectContent>
                  </Select>
                  <Button 
                    variant="destructive" 
                    onClick={() => setInvites(invites.filter((_, j) => j !== idx))}
                  >
                    –£–¥–∞–ª–∏—Ç—å
                  </Button>
                </div>
              ))}
              <Button 
                variant="secondary" 
                onClick={() => setInvites([...invites, { email: '', role: 'member' }])}
              >
                + –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
              </Button>
            </div>

            <Separator />
            <div className="flex justify-between">
              <Button variant="ghost" onClick={back}>–ù–∞–∑–∞–¥</Button>
              <Button onClick={next}>–î–∞–ª–µ–µ</Button>
            </div>
          </div>
        )}

        {active === 'departments' && (
          <div className="space-y-5">
            <p className="text-sm text-muted-foreground">
              –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∑–∞–≥–æ—Ç–æ–≤—å—Ç–µ –æ—Ç–¥–µ–ª—ã (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).
            </p>
            <div className="space-y-3">
              {departments.map((d, idx) => (
                <div key={idx} className="grid grid-cols-1 sm:grid-cols-3 gap-3">
                  <Input
                    placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞"
                    value={d.name}
                    onChange={(e) => {
                      const v = [...departments]
                      v[idx] = { ...v[idx], name: e.target.value }
                      setDepartments(v)
                    }}
                  />
                  <Input
                    placeholder="–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                    value={d.description ?? ''}
                    onChange={(e) => {
                      const v = [...departments]
                      v[idx] = { ...v[idx], description: e.target.value }
                      setDepartments(v)
                    }}
                  />
                  <Button 
                    variant="destructive" 
                    onClick={() => setDepartments(departments.filter((_, j) => j !== idx))}
                  >
                    –£–¥–∞–ª–∏—Ç—å
                  </Button>
                </div>
              ))}
              <Button 
                variant="secondary" 
                onClick={() => setDepartments([...departments, { name: '' }])}
              >
                + –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª
              </Button>
            </div>

            <Separator />
            <div className="flex justify-between">
              <Button variant="ghost" onClick={back}>–ù–∞–∑–∞–¥</Button>
              <Button onClick={next}>–î–∞–ª–µ–µ</Button>
            </div>
          </div>
        )}

        {active === 'review' && (
          <div className="space-y-5">
            <h3 className="text-lg font-medium">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ</h3>
            <div className="rounded-md border p-4 text-sm space-y-2">
              <div><b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {company.name}</div>
              <div><b>URL:</b> <code>your-domain.com/org/{previewSlug}</code></div>
              {company.description && <div><b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {company.description}</div>}
              {company.industry && <div><b>–ò–Ω–¥—É—Å—Ç—Ä–∏—è:</b> {company.industry}</div>}
              {company.size && <div><b>–†–∞–∑–º–µ—Ä:</b> {company.size}</div>}
              {company.custom_fields?.website && (
                <div><b>–í–µ–±-—Å–∞–π—Ç:</b> {company.custom_fields.website}</div>
              )}
              {invites.filter(i => i.email.trim()).length > 0 && (
                <div><b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:</b> {invites.filter(i => i.email.trim()).length}</div>
              )}
              {departments.filter(d => d.name.trim()).length > 0 && (
                <div>
                  <b>–û—Ç–¥–µ–ª—ã:</b> {departments.filter(d => d.name.trim()).map(d => d.name.trim()).join(', ')}
                </div>
              )}
            </div>

            <div className="flex justify-between">
              <Button variant="ghost" onClick={back}>–ù–∞–∑–∞–¥</Button>
              <Button 
                disabled={saving || finishing || company.name.trim().length < 2} 
                onClick={handleFinish}
              >
                {finishing ? (
                  <>
                    <div className="mr-2 h-4 w-4 animate-spin rounded-full border-2 border-white border-t-transparent" />
                    –ó–∞–≤–µ—Ä—à–∞–µ–º‚Ä¶
                  </>
                ) : (
                  '–ó–∞–≤–µ—Ä—à–∏—Ç—å'
                )}
              </Button>
            </div>
          </div>
        )}
      </Card>
    </div>
  )
}

// Wrap with authentication protection
export default function OnboardingPageContent() {
  return (
    <ProtectedRoute requireAuth={true}>
      <OnboardingPageContentContent />
    </ProtectedRoute>
  )
}
