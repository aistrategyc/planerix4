"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { 
import ProtectedRoute from "@/components/auth/ProtectedRoute"
  BarChart3, 
  Target, 
  Users, 
  Brain, 
  ArrowRight, 
  TrendingUp,
  TrendingDown,
  Calendar,
  CheckCircle,
  Clock,
  AlertCircle,
  Plus,
  Bell,
  Zap,
  Award,
  Activity,
  PieChart,
  DollarSign,
  UserPlus,
  FileText,
  Settings,
  ArrowUpRight,
  ChevronRight,
  Star
} from "lucide-react";

function DashboardHomeContentContent() {
  const [currentTime, setCurrentTime] = useState(new Date());

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 60000);
    return () => clearInterval(timer);
  }, []);

  // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const user = {
    name: "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
    role: "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞",
    avatar: "https://api.dicebear.com/7.x/initials/svg?seed=–ò–ò",
    department: "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥"
  };

  // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
  const mainMetrics = [
    {
      title: "–í—ã—Ä—É—á–∫–∞",
      value: "$2.4M",
      change: 12.5,
      icon: DollarSign,
      color: "text-green-600",
      bgColor: "bg-green-50"
    },
    {
      title: "–ü—Ä–æ–µ–∫—Ç—ã",
      value: "24",
      change: 8.2,
      icon: FileText,
      color: "text-blue-600",
      bgColor: "bg-blue-50"
    },
    {
      title: "–ö–æ–º–∞–Ω–¥–∞",
      value: "48",
      change: -2.1,
      icon: Users,
      color: "text-purple-600",
      bgColor: "bg-purple-50"
    },
    {
      title: "–ö–æ–Ω–≤–µ—Ä—Å–∏—è",
      value: "18.4%",
      change: 5.7,
      icon: TrendingUp,
      color: "text-orange-600",
      bgColor: "bg-orange-50"
    }
  ];

  // –ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏
  const activeGoals = [
    {
      id: 1,
      title: "–£–≤–µ–ª–∏—á–∏—Ç—å –≤—ã—Ä—É—á–∫—É –Ω–∞ 25%",
      progress: 68,
      deadline: "2025-12-31",
      priority: "high",
      team: ["–ê–°", "–ü–ö", "–ú–ü"]
    },
    {
      id: 2,
      title: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é",
      progress: 45,
      deadline: "2025-09-15",
      priority: "medium",
      team: ["–î–°", "–ï–ü"]
    },
    {
      id: 3,
      title: "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã",
      progress: 82,
      deadline: "2025-08-30",
      priority: "low",
      team: ["–ù–í", "–¢–ö", "–†–ú"]
    }
  ];

  // –ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  const recentActivity = [
    {
      id: 1,
      type: "goal_update",
      title: "–û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å —Ü–µ–ª–∏ ¬´–£–≤–µ–ª–∏—á–∏—Ç—å –≤—ã—Ä—É—á–∫—É¬ª",
      time: "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥",
      user: "–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞",
      icon: Target
    },
    {
      id: 2,
      type: "project_created",
      title: "–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç ¬´–õ–µ—Ç–Ω—è—è –∫–∞–º–ø–∞–Ω–∏—è¬ª",
      time: "4 —á–∞—Å–∞ –Ω–∞–∑–∞–¥",
      user: "–ü–µ—Ç—Ä –ö—É–∑–Ω–µ—Ü–æ–≤",
      icon: Plus
    },
    {
      id: 3,
      type: "team_join",
      title: "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∞—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ",
      time: "1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥",
      user: "HR –æ—Ç–¥–µ–ª",
      icon: UserPlus
    },
    {
      id: 4,
      type: "achievement",
      title: "–î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å ¬´–û–±—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã¬ª",
      time: "2 –¥–Ω—è –Ω–∞–∑–∞–¥",
      user: "–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
      icon: Award
    }
  ];

  // –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è
  const upcomingEvents = [
    {
      id: 1,
      title: "–ü–ª–∞–Ω–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã",
      time: "10:00",
      date: "–°–µ–≥–æ–¥–Ω—è",
      type: "meeting",
      participants: 8
    },
    {
      id: 2,
      title: "–†–µ–≤—å—é –ø—Ä–æ–µ–∫—Ç–∞ X",
      time: "14:30",
      date: "–°–µ–≥–æ–¥–Ω—è",
      type: "review",
      participants: 5
    },
    {
      id: 3,
      title: "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è Q3",
      time: "09:00",
      date: "–ó–∞–≤—Ç—Ä–∞",
      type: "presentation",
      participants: 12
    }
  ];

  // AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  const aiInsights = [
    {
      id: 1,
      title: "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±—é–¥–∂–µ—Ç–∞",
      description: "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å 15% –±—é–¥–∂–µ—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ A –≤ –∫–∞–Ω–∞–ª B –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è ROI –Ω–∞ 23%",
      impact: "high",
      icon: Brain
    },
    {
      id: 2,
      title: "–†–∏—Å–∫ –ø–æ –ø—Ä–æ–µ–∫—Ç—É",
      description: "–ü—Ä–æ–µ–∫—Ç ¬´–õ–µ—Ç–Ω—è—è –∫–∞–º–ø–∞–Ω–∏—è¬ª –º–æ–∂–µ—Ç –∑–∞–¥–µ—Ä–∂–∞—Ç—å—Å—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å 2 —Ä–µ—Å—É—Ä—Å–∞",
      impact: "medium",
      icon: AlertCircle
    }
  ];

  const getTimeGreeting = () => {
    const hour = currentTime.getHours();
    if (hour < 12) return "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ";
    if (hour < 17) return "–î–æ–±—Ä—ã–π –¥–µ–Ω—å";
    return "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä";
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'bg-red-100 text-red-800 border-red-200';
      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low': return 'bg-green-100 text-green-800 border-green-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getImpactColor = (impact: string) => {
    switch (impact) {
      case 'high': return 'border-l-red-500';
      case 'medium': return 'border-l-yellow-500';
      case 'low': return 'border-l-green-500';
      default: return 'border-l-gray-500';
    }
  };

  return (
    <div className="p-6 space-y-6 bg-gray-50/50 min-h-screen">
      {/* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ */}
      <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
        <div className="space-y-1">
          <h1 className="text-2xl md:text-3xl font-bold text-gray-900">
            {getTimeGreeting()}, {user.name.split(' ')[0]}! üëã
          </h1>
          <p className="text-gray-600">
            –í–æ—Ç —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –≤–∞—à–µ–º {user.department.toLowerCase()} –æ—Ç–¥–µ–ª–µ —Å–µ–≥–æ–¥–Ω—è
          </p>
        </div>
        <div className="flex items-center gap-3">
          <Button variant="outline" size="sm">
            <Calendar className="w-4 h-4 mr-2" />
            {currentTime.toLocaleDateString('ru-RU', { 
              day: 'numeric', 
              month: 'long' 
            })}
          </Button>
          <Button className="bg-blue-600 hover:bg-blue-700">
            <Plus className="w-4 h-4 mr-2" />
            –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å
          </Button>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {mainMetrics.map((metric, index) => {
          const Icon = metric.icon;
          return (
            <Card key={index} className="hover:shadow-md transition-shadow">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div className="space-y-2">
                    <p className="text-sm font-medium text-gray-600">{metric.title}</p>
                    <div className="flex items-center gap-2">
                      <p className="text-2xl font-bold">{metric.value}</p>
                      <div className={`flex items-center text-xs ${
                        metric.change > 0 ? 'text-green-600' : 'text-red-600'
                      }`}>
                        {metric.change > 0 ? (
                          <TrendingUp className="w-3 h-3 mr-1" />
                        ) : (
                          <TrendingDown className="w-3 h-3 mr-1" />
                        )}
                        {Math.abs(metric.change)}%
                      </div>
                    </div>
                  </div>
                  <div className={`${metric.bgColor} p-3 rounded-lg`}>
                    <Icon className={`w-6 h-6 ${metric.color}`} />
                  </div>
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>

      <div className="grid lg:grid-cols-3 gap-6">
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ */}
        <div className="lg:col-span-2 space-y-6">
          {/* –ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏ */}
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <div>
                <CardTitle className="flex items-center gap-2">
                  <Target className="w-5 h-5 text-blue-600" />
                  –ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏
                </CardTitle>
                <CardDescription>
                  –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ OKR –∏ –∏—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å
                </CardDescription>
              </div>
              <Button variant="outline" size="sm">
                –í—Å–µ —Ü–µ–ª–∏
                <ChevronRight className="w-4 h-4 ml-1" />
              </Button>
            </CardHeader>
            <CardContent className="space-y-4">
              {activeGoals.map((goal) => (
                <div key={goal.id} className="p-4 border rounded-lg hover:bg-gray-50 transition-colors">
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex-1">
                      <h4 className="font-medium text-sm mb-1">{goal.title}</h4>
                      <div className="flex items-center gap-2">
                        <Badge className={getPriorityColor(goal.priority)} variant="outline">
                          {goal.priority === 'high' ? '–í—ã—Å–æ–∫–∏–π' : 
                           goal.priority === 'medium' ? '–°—Ä–µ–¥–Ω–∏–π' : '–ù–∏–∑–∫–∏–π'}
                        </Badge>
                        <span className="text-xs text-gray-500">
                          –î–æ {new Date(goal.deadline).toLocaleDateString('ru-RU')}
                        </span>
                      </div>
                    </div>
                    <div className="flex -space-x-2">
                      {goal.team.map((member, idx) => (
                        <Avatar key={idx} className="w-6 h-6 border-2 border-white">
                          <AvatarFallback className="text-xs">{member}</AvatarFallback>
                        </Avatar>
                      ))}
                    </div>
                  </div>
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
                      <span className="font-medium">{goal.progress}%</span>
                    </div>
                    <Progress value={goal.progress} className="h-2" />
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>

          {/* AI –ò–Ω—Å–∞–π—Ç—ã */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Brain className="w-5 h-5 text-purple-600" />
                AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
              </CardTitle>
              <CardDescription>
                –£–º–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {aiInsights.map((insight) => {
                const Icon = insight.icon;
                return (
                  <div key={insight.id} className={`p-4 border-l-4 bg-gray-50 rounded-r-lg ${getImpactColor(insight.impact)}`}>
                    <div className="flex items-start gap-3">
                      <div className="flex-shrink-0 p-2 bg-white rounded-lg shadow-sm">
                        <Icon className="w-4 h-4 text-purple-600" />
                      </div>
                      <div className="flex-1">
                        <h4 className="font-medium text-sm mb-1">{insight.title}</h4>
                        <p className="text-sm text-gray-600 leading-relaxed">{insight.description}</p>
                        <div className="flex items-center gap-2 mt-3">
                          <Button size="sm" variant="outline" className="h-7 text-xs">
                            –ü—Ä–∏–º–µ–Ω–∏—Ç—å
                          </Button>
                          <Button size="sm" variant="ghost" className="h-7 text-xs">
                            –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                          </Button>
                        </div>
                      </div>
                    </div>
                  </div>
                );
              })}
            </CardContent>
          </Card>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ */}
        <div className="space-y-6">
          {/* –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Calendar className="w-5 h-5 text-green-600" />
                –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
              </CardTitle>
              <CardDescription>
                –ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              {upcomingEvents.map((event) => (
                <div key={event.id} className="flex items-center gap-3 p-3 hover:bg-gray-50 rounded-lg transition-colors">
                  <div className="flex-shrink-0 w-12 text-center">
                    <div className="text-sm font-medium">{event.time}</div>
                    <div className="text-xs text-gray-500">{event.date}</div>
                  </div>
                  <div className="flex-1">
                    <h4 className="text-sm font-medium">{event.title}</h4>
                    <p className="text-xs text-gray-600">{event.participants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</p>
                  </div>
                  <Button size="sm" variant="ghost" className="w-8 h-8 p-0">
                    <ArrowUpRight className="w-4 h-4" />
                  </Button>
                </div>
              ))}
              <Button variant="outline" size="sm" className="w-full">
                <Plus className="w-4 h-4 mr-2" />
                –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
              </Button>
            </CardContent>
          </Card>

          {/* –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Activity className="w-5 h-5 text-orange-600" />
                –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
              </CardTitle>
              <CardDescription>
                –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {recentActivity.map((activity) => {
                const Icon = activity.icon;
                return (
                  <div key={activity.id} className="flex items-start gap-3">
                    <div className="flex-shrink-0 w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center">
                      <Icon className="w-4 h-4 text-gray-600" />
                    </div>
                    <div className="flex-1">
                      <p className="text-sm">{activity.title}</p>
                      <div className="flex items-center gap-2 mt-1">
                        <span className="text-xs text-gray-500">{activity.user}</span>
                        <span className="w-1 h-1 bg-gray-300 rounded-full"></span>
                        <span className="text-xs text-gray-500">{activity.time}</span>
                      </div>
                    </div>
                  </div>
                );
              })}
            </CardContent>
          </Card>

          {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
          <Card>
            <CardHeader>
              <CardTitle className="text-base">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</CardTitle>
            </CardHeader>
            <CardContent className="grid grid-cols-2 gap-2">
              <Button variant="outline" size="sm" className="h-auto p-3 flex flex-col gap-1">
                <Target className="w-4 h-4" />
                <span className="text-xs">–ù–æ–≤–∞—è —Ü–µ–ª—å</span>
              </Button>
              <Button variant="outline" size="sm" className="h-auto p-3 flex flex-col gap-1">
                <Users className="w-4 h-4" />
                <span className="text-xs">–ö–æ–º–∞–Ω–¥–∞</span>
              </Button>
              <Button variant="outline" size="sm" className="h-auto p-3 flex flex-col gap-1">
                <BarChart3 className="w-4 h-4" />
                <span className="text-xs">–û—Ç—á–µ—Ç—ã</span>
              </Button>
              <Button variant="outline" size="sm" className="h-auto p-3 flex flex-col gap-1">
                <Settings className="w-4 h-4" />
                <span className="text-xs">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</span>
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}

// Wrap with authentication protection
export default function DashboardHomeContent() {
  return (
    <ProtectedRoute requireAuth={true}>
      <DashboardHomeContentContent />
    </ProtectedRoute>
  )
}
