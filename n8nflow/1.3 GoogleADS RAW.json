{
  "name": "1.3 GoogleADS RAW",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtMinute": 30
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -96,
        80
      ],
      "id": "acd8a90b-a766-471c-8af0-a176f7c711fd",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://googleads.googleapis.com/v19/customers/9489629233/googleAds:searchStream",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "developer-token",
              "value": "2SAsiKGexr_TCjkTKZDfBw"
            },
            {
              "name": "login-customer-id",
              "value": "5717046696"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"query\": `SELECT\n              segments.date,\n              customer.id,\n              campaign.id,\n              campaign.name,\n              campaign.status,\n              campaign.advertising_channel_type,\n              campaign.start_date,\n              campaign.end_date,\n              campaign_budget.amount_micros,\n              metrics.impressions,\n              metrics.clicks,\n              metrics.conversions,\n              metrics.all_conversions,\n              metrics.conversions_value,\n              metrics.cost_micros,\n              metrics.average_cpc,\n              metrics.ctr,\n              metrics.conversions_from_interactions_rate\n            FROM campaign\n            WHERE segments.date BETWEEN '${$now.minus({ days: 7 }).format('yyyy-MM-dd')}'\n                                    AND '${$now.minus({ days: 1 }).format('yyyy-MM-dd')}'\n            LIMIT 10000`\n} }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        288,
        288
      ],
      "id": "049ed1eb-1253-47e7-8f31-e4559911d2d5",
      "name": "gads_campaign_daily (RAW)",
      "alwaysOutputData": true,
      "credentials": {
        "googleAdsOAuth2Api": {
          "id": "9onxSlQLYIM6IzN5",
          "name": "Google Ads account 3"
        },
        "googleOAuth2Api": {
          "id": "x86qlO0wBjjZUtLa",
          "name": "Google account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://googleads.googleapis.com/v19/customers/9489629233/googleAds:searchStream",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "developer-token",
              "value": "2SAsiKGexr_TCjkTKZDfBw"
            },
            {
              "name": "login-customer-id",
              "value": "5717046696"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"query\": `SELECT\n              segments.date,\n              customer.id,\n              campaign.id,\n              ad_group.id,\n              ad_group_ad.ad.id,\n              ad_group_ad.ad.name,\n              ad_group_ad.ad.type,\n              ad_group_ad.ad.final_urls,\n              metrics.impressions,\n              metrics.clicks,\n              metrics.conversions,\n              metrics.all_conversions,\n              metrics.conversions_value,\n              metrics.cost_micros,\n              metrics.average_cpc,\n              metrics.ctr\n            FROM ad_group_ad\n            WHERE segments.date BETWEEN '${$now.minus({ days: 7 }).format('yyyy-MM-dd')}'\n                                    AND '${$now.minus({ days: 1 }).format('yyyy-MM-dd')}'\n            LIMIT 10000`\n} }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        288,
        512
      ],
      "id": "5402e31d-0255-4c67-b5b5-d95b342b701d",
      "name": "Ad daily",
      "alwaysOutputData": true,
      "credentials": {
        "googleAdsOAuth2Api": {
          "id": "9onxSlQLYIM6IzN5",
          "name": "Google Ads account 3"
        },
        "googleOAuth2Api": {
          "id": "x86qlO0wBjjZUtLa",
          "name": "Google account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://googleads.googleapis.com/v19/customers/9489629233/googleAds:searchStream",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "developer-token",
              "value": "2SAsiKGexr_TCjkTKZDfBw"
            },
            {
              "name": "login-customer-id",
              "value": "5717046696"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"query\": `SELECT\n              segments.date,\n              customer.id,\n              campaign.id,\n              ad_group.id,\n              ad_group_criterion.keyword.text,\n              ad_group_criterion.keyword.match_type,\n              metrics.impressions,\n              metrics.clicks,\n              metrics.conversions,\n              metrics.all_conversions,\n              metrics.conversions_value,\n              metrics.cost_micros,\n              metrics.average_cpc,\n              metrics.ctr\n            FROM keyword_view\n            WHERE segments.date BETWEEN '${$now.minus({ days: 7 }).format('yyyy-MM-dd')}'\n                                    AND '${$now.minus({ days: 1 }).format('yyyy-MM-dd')}'\n            LIMIT 10000`\n} }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        288,
        720
      ],
      "id": "5de41308-98c5-4a06-ad12-450d77f14ee8",
      "name": "Keyword daily",
      "alwaysOutputData": true,
      "credentials": {
        "googleAdsOAuth2Api": {
          "id": "9onxSlQLYIM6IzN5",
          "name": "Google Ads account 3"
        },
        "googleOAuth2Api": {
          "id": "x86qlO0wBjjZUtLa",
          "name": "Google account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://googleads.googleapis.com/v19/customers/9489629233/googleAds:searchStream",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "developer-token",
              "value": "2SAsiKGexr_TCjkTKZDfBw"
            },
            {
              "name": "login-customer-id",
              "value": "5717046696"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  query:\n    \"SELECT \" +\n    \"  segments.date, \" +\n    \"  click_view.gclid, \" +\n    \"  customer.id, \" +\n    \"  campaign.id, \" +\n    \"  ad_group.id \" +\n    \"FROM click_view \" +\n    \"WHERE segments.date = '\" + $json.date + \"'\"\n} }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        288,
        80
      ],
      "id": "f6cc01ce-6d64-4e6f-b286-36e5aaea471c",
      "name": "Click log",
      "alwaysOutputData": true,
      "credentials": {
        "googleAdsOAuth2Api": {
          "id": "9onxSlQLYIM6IzN5",
          "name": "Google Ads account 3"
        },
        "googleOAuth2Api": {
          "id": "x86qlO0wBjjZUtLa",
          "name": "Google account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Name: Make last-7-days (exclude today)\nfunction fmt(d){ return d.toISOString().slice(0,10); } // yyyy-MM-dd\nconst today = new Date(); // сейчас\ntoday.setUTCHours(0,0,0,0);\n\n// соберём 7 штук: d-7 .. d-1\nconst out = [];\nfor (let i = 7; i >= 1; i--) {\n  const dt = new Date(today);\n  dt.setUTCDate(today.getUTCDate() - i);\n  out.push({ json: { date: fmt(dt) } });\n}\nreturn out;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        112,
        80
      ],
      "id": "72b94b41-1a1f-480c-b9d3-320e3013695a",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "// Map Google Ads ClickView → rows[] (robust for both search & searchStream)\nfunction s(x){ return x == null ? null : String(x); }\nfunction toNumOrNull(x){\n  const n = Number(x);\n  return Number.isFinite(n) ? n : null;\n}\n\nconst roots = [];\n\n// Разворачиваем все варианты формы ответа\nfor (const it of items) {\n  const j = it?.json;\n\n  if (Array.isArray(j?.results)) {\n    // Обычный search: { results: [ {...}, {...} ] }\n    roots.push(...j.results);\n  } else if (Array.isArray(j)) {\n    // Иногда нода отдаёт массив пакетов searchStream: [ { results: [...] }, ... ]\n    for (const pack of j) {\n      if (Array.isArray(pack?.results)) roots.push(...pack.results);\n      else if (pack && typeof pack === 'object') roots.push(pack);\n    }\n  } else if (j && typeof j === 'object') {\n    // На всякий — одиночный объект\n    roots.push(j);\n  }\n}\n\nconst out = roots.map(r => {\n  const date = r?.segments?.date ?? null;\n  const gclid = s(r?.clickView?.gclid);\n  const customer_id = toNumOrNull(r?.customer?.id);\n  const campaign_id = toNumOrNull(r?.campaign?.id);\n  // ad_group.id бывает \"0\" — считаем пустым\n  const ad_group_id_raw = r?.adGroup?.id;\n  const ad_group_id = (ad_group_id_raw === \"0\" || ad_group_id_raw === 0) ? null : toNumOrNull(ad_group_id_raw);\n  const resource_name = s(r?.clickView?.resourceName);\n\n  return {\n    date,\n    gclid,\n    customer_id,\n    campaign_id,\n    ad_group_id,\n    resource_name,\n  };\n})\n// отфильтруем мусор, но не агрессивно\n.filter(x => x.date && x.gclid);\n\nreturn [{ json: { rows: out } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        496,
        80
      ],
      "id": "bfe07333-db76-4abd-97af-996a18be1ed9",
      "name": "Code1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH src AS (\n  SELECT *\n  FROM json_to_recordset($1::json) AS x(\n    date           date,\n    gclid          text,\n    customer_id    bigint,\n    campaign_id    bigint,\n    ad_group_id    bigint,\n    resource_name  text\n  )\n)\nINSERT INTO raw.google_ads_clicks AS t (\n  date, gclid, customer_id, campaign_id, ad_group_id, resource_name, load_timestamp\n)\nSELECT\n  date,\n  NULLIF(gclid,''),\n  customer_id,\n  campaign_id,\n  ad_group_id,\n  resource_name,\n  now()\nFROM src\nWHERE NULLIF(gclid,'') IS NOT NULL\nON CONFLICT (gclid, date) DO UPDATE\nSET\n  customer_id   = EXCLUDED.customer_id,\n  campaign_id   = EXCLUDED.campaign_id,\n  ad_group_id   = EXCLUDED.ad_group_id,\n  resource_name = EXCLUDED.resource_name,\n  load_timestamp = now();",
        "options": {
          "queryReplacement": "=$1 = {{$json.rows}}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        704,
        80
      ],
      "id": "468fe6f4-993d-4972-9636-780412598d54",
      "name": "raw.google_ads_clicks",
      "credentials": {
        "postgres": {
          "id": "vltYUx2Z4Q74JwSy",
          "name": "Final ITstep"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Name: Map Google Ads Campaign Daily -> rows[]\nfunction s(x){ return x == null ? null : String(x); }\nfunction i(x){\n  if (x == null) return null;\n  const n = Number(String(x).replace(/[ ,]/g,''));\n  return Number.isFinite(n) ? Math.trunc(n) : null;\n}\nfunction f(x){\n  if (x == null) return null;\n  const n = Number(String(x).replace(/[ ,]/g,''));\n  return Number.isFinite(n) ? n : null;\n}\n\n// Безопасный getter по нескольким путям (первый с ненулевым значением побеждает)\nfunction getAny(obj, paths){\n  for (const p of paths){\n    const v = p.split('.').reduce((acc, k) => (acc && acc[k] !== undefined) ? acc[k] : undefined, obj);\n    if (v !== undefined && v !== null) return v;\n  }\n  return null;\n}\n\n// Нормализуем вход: searchStream может вернуть массив чанков {results:[...]}, search — один объект с results\nconst roots = [];\nfor (const it of items){\n  const j = it?.json;\n  if (Array.isArray(j?.results)) {\n    roots.push(...j.results);\n  } else if (Array.isArray(j)) {\n    for (const pack of j) {\n      if (Array.isArray(pack?.results)) roots.push(...pack.results);\n      else if (pack && typeof pack === 'object') roots.push(pack);\n    }\n  } else if (j && typeof j === 'object') {\n    roots.push(j);\n  }\n}\n\nconst rows = [];\nfor (const r of roots){\n  const date   = s(getAny(r, ['segments.date', 'segments.date']));\n  const custId = s(getAny(r, ['customer.id', 'customer.id']));\n  const campId = getAny(r, ['campaign.id', 'campaign.id']);\n\n  const cname  = s(getAny(r, ['campaign.name', 'campaign.name']));\n  const cstat  = s(getAny(r, ['campaign.status', 'campaign.status']));\n  const chann  = s(getAny(r, [\n    'campaign.advertisingChannelType',\n    'campaign.advertising_channel_type'\n  ]));\n  const cstart = s(getAny(r, [\n    'campaign.startDate',\n    'campaign.start_date'\n  ]));\n  const cend   = s(getAny(r, [\n    'campaign.endDate',\n    'campaign.end_date'\n  ]));\n\n  const budMicros = i(getAny(r, [\n    'campaignBudget.amountMicros',\n    'campaign_budget.amount_micros'\n  ]));\n\n  const m_impr   = i(getAny(r, ['metrics.impressions', 'metrics.impressions']));\n  const m_clicks = i(getAny(r, ['metrics.clicks', 'metrics.clicks']));\n  const m_cost   = i(getAny(r, ['metrics.costMicros', 'metrics.cost_micros']));\n  const m_cpc    = i(getAny(r, ['metrics.averageCpc', 'metrics.average_cpc']));\n  const m_ctr    = f(getAny(r, ['metrics.ctr', 'metrics.ctr']));\n  const m_conv   = f(getAny(r, ['metrics.conversions', 'metrics.conversions']));\n  const m_all    = f(getAny(r, ['metrics.allConversions', 'metrics.all_conversions']));\n  const m_value  = f(getAny(r, ['metrics.conversionsValue', 'metrics.conversions_value']));\n  const m_rate   = f(getAny(r, [\n    'metrics.conversionsFromInteractionsRate',\n    'metrics.conversions_from_interactions_rate'\n  ]));\n\n  // обязательные ключи: campaign_id + date\n  if (!date || !campId) continue;\n\n  rows.push({\n    date: date,                                        // 'YYYY-MM-DD'\n    customer_id: custId ? Number(custId) : null,\n    campaign_id: Number(campId),\n    campaign_name: cname,\n    campaign_status: cstat,\n    advertising_channel_type: chann,\n    start_date: cstart || null,\n    end_date: cend || null,\n\n    budget_amount_micros: budMicros,\n\n    impressions: m_impr,\n    clicks: m_clicks,\n    cost_micros: m_cost,\n    average_cpc_micros: m_cpc,\n    ctr: m_ctr,                                        // доля, не %\n    conversions: m_conv,\n    all_conversions: m_all,\n    conversions_value: m_value,\n    conversions_from_interactions_rate: m_rate,\n  });\n}\n\nreturn [{ json: { rows } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        496,
        288
      ],
      "id": "3c728d90-0b25-40d2-b72a-4eadbeaf131e",
      "name": "Code2"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH src AS (\n  SELECT *\n  FROM json_to_recordset($1::json) AS x(\n    date                               text,\n    customer_id                        text,\n    campaign_id                        text,\n    campaign_name                      text,\n    campaign_status                    text,\n    advertising_channel_type           text,\n    start_date                         text,\n    end_date                           text,\n    budget_amount_micros               text,\n    impressions                        text,\n    clicks                             text,\n    cost_micros                        text,\n    average_cpc_micros                 text,\n    ctr                                text,\n    conversions                        text,\n    all_conversions                    text,\n    conversions_value                  text,\n    conversions_from_interactions_rate text\n  )\n)\nINSERT INTO raw.google_ads_campaign_daily AS t (\n  date, customer_id, campaign_id, campaign_name, campaign_status, advertising_channel_type,\n  start_date, end_date, budget_amount_micros,\n  impressions, clicks, cost_micros, average_cpc_micros, ctr,\n  conversions, all_conversions, conversions_value, conversions_from_interactions_rate,\n  load_timestamp\n)\nSELECT\n  NULLIF(date,'')::date,\n  NULLIF(customer_id,'')::bigint,\n  NULLIF(campaign_id,'')::bigint,\n  NULLIF(campaign_name,''),\n  NULLIF(campaign_status,''),\n  NULLIF(advertising_channel_type,''),\n  CASE WHEN NULLIF(start_date,'') IS NULL THEN NULL ELSE start_date::date END,\n  CASE WHEN NULLIF(end_date,'')   IS NULL THEN NULL ELSE end_date::date   END,\n  NULLIF(budget_amount_micros,'')::bigint,\n  NULLIF(impressions,'')::bigint,\n  NULLIF(clicks,'')::bigint,\n  NULLIF(cost_micros,'')::bigint,\n  NULLIF(average_cpc_micros,'')::bigint,\n  NULLIF(ctr,'')::numeric,\n  NULLIF(conversions,'')::numeric,\n  NULLIF(all_conversions,'')::numeric,\n  NULLIF(conversions_value,'')::numeric,\n  NULLIF(conversions_from_interactions_rate,'')::numeric,\n  now()\nFROM src\nWHERE NULLIF(date,'') IS NOT NULL AND NULLIF(campaign_id,'') IS NOT NULL\nON CONFLICT (campaign_id, date) DO UPDATE\nSET\n  customer_id                        = COALESCE(EXCLUDED.customer_id, t.customer_id),\n  campaign_name                      = COALESCE(EXCLUDED.campaign_name, t.campaign_name),\n  campaign_status                    = COALESCE(EXCLUDED.campaign_status, t.campaign_status),\n  advertising_channel_type           = COALESCE(EXCLUDED.advertising_channel_type, t.advertising_channel_type),\n  start_date                         = COALESCE(EXCLUDED.start_date, t.start_date),\n  end_date                           = COALESCE(EXCLUDED.end_date, t.end_date),\n  budget_amount_micros               = COALESCE(EXCLUDED.budget_amount_micros, t.budget_amount_micros),\n  impressions                        = COALESCE(EXCLUDED.impressions, t.impressions),\n  clicks                             = COALESCE(EXCLUDED.clicks, t.clicks),\n  cost_micros                        = COALESCE(EXCLUDED.cost_micros, t.cost_micros),\n  average_cpc_micros                 = COALESCE(EXCLUDED.average_cpc_micros, t.average_cpc_micros),\n  ctr                                = COALESCE(EXCLUDED.ctr, t.ctr),\n  conversions                        = COALESCE(EXCLUDED.conversions, t.conversions),\n  all_conversions                    = COALESCE(EXCLUDED.all_conversions, t.all_conversions),\n  conversions_value                  = COALESCE(EXCLUDED.conversions_value, t.conversions_value),\n  conversions_from_interactions_rate = COALESCE(EXCLUDED.conversions_from_interactions_rate, t.conversions_from_interactions_rate),\n  load_timestamp                     = now();",
        "options": {
          "queryReplacement": "=$1 = {{$json.rows}}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        704,
        288
      ],
      "id": "0eea28c3-cb90-4c0d-9925-396c4d2c3070",
      "name": "raw.google_ads_campaign_daily",
      "credentials": {
        "postgres": {
          "id": "vltYUx2Z4Q74JwSy",
          "name": "Final ITstep"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Name: Map Google Ads Ad Daily -> rows[]\nfunction s(x){ return x == null ? null : String(x); }\nfunction i(x){\n  if (x == null) return null;\n  const n = Number(String(x).replace(/[ ,]/g,''));\n  return Number.isFinite(n) ? Math.trunc(n) : null;\n}\nfunction f(x){\n  if (x == null) return null;\n  const n = Number(String(x).replace(/[ ,]/g,''));\n  return Number.isFinite(n) ? n : null;\n}\nfunction pick(obj, path){\n  return path.split('.').reduce((acc,k)=> (acc && acc[k]!==undefined) ? acc[k] : null, obj);\n}\n\nconst roots = items.flatMap(it =>\n  Array.isArray(it.json?.results) ? it.json.results : [it.json]\n).filter(Boolean);\n\nconst rows = [];\nfor (const r of roots){\n  const get = (p1,p2) => pick(r,p1) ?? pick(r,p2);\n\n  const date        = s(get('segments.date','segments.date'));\n  const customerId  = s(get('customer.id','customer.id'));\n  const campaignId  = s(get('campaign.id','campaign.id'));\n  const adGroupId   = s(get('adGroup.id','adGroup.id')) ?? s(get('ad_group.id','ad_group.id'));\n  const adId        = s(get('adGroupAd.ad.id','adGroupAd.ad.id')) \n                   ?? s(get('ad_group_ad.ad.id','ad_group_ad.ad.id'))\n                   ?? s(get('ad.id','ad.id'));\n\n  const adName      = s(get('adGroupAd.ad.name','ad_group_ad.ad.name')) ?? s(get('ad.name','ad.name'));\n  const adType      = s(get('adGroupAd.ad.type','ad_group_ad.ad.type')) ?? s(get('ad.type','ad.type'));\n\n  // finalUrls может быть массивом/строкой; нормализуем к массиву\n  let finalUrls = get('adGroupAd.ad.finalUrls','ad_group_ad.ad.final_urls') ?? get('ad.finalUrls','ad.final_urls');\n  if (finalUrls == null) {\n    finalUrls = [];\n  } else if (Array.isArray(finalUrls)) {\n    finalUrls = finalUrls.map(u => String(u));\n  } else {\n    finalUrls = [String(finalUrls)];\n  }\n\n  const m_impr   = i(get('metrics.impressions','metrics.impressions'));\n  const m_clicks = i(get('metrics.clicks','metrics.clicks'));\n  const m_cost   = i(get('metrics.costMicros','metrics.cost_micros'));\n  const m_cpc    = i(get('metrics.averageCpc','metrics.average_cpc'));\n  const m_ctr    = f(get('metrics.ctr','metrics.ctr'));\n  const m_conv   = f(get('metrics.conversions','metrics.conversions'));\n  const m_all    = f(get('metrics.allConversions','metrics.all_conversions'));\n  const m_value  = f(get('metrics.conversionsValue','metrics.conversions_value'));\n\n  // обязательные ключи для RAW: date + ad_id\n  if (!date || !adId) continue;\n\n  rows.push({\n    date: date,                                        // 'YYYY-MM-DD'\n    customer_id: customerId ? Number(customerId) : null,\n    campaign_id: campaignId ? Number(campaignId) : null,\n    ad_group_id: adGroupId ? Number(adGroupId) : null,\n    ad_id: Number(adId),\n    ad_name: adName,\n    ad_type: adType,\n    final_urls: finalUrls,                             // массив строк\n\n    impressions: m_impr,\n    clicks: m_clicks,\n    cost_micros: m_cost,\n    average_cpc_micros: m_cpc,\n    ctr: m_ctr,                                        // доля (0.0769...)\n    conversions: m_conv,\n    all_conversions: m_all,\n    conversions_value: m_value,\n  });\n}\n\nreturn [{ json: { rows } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        496,
        512
      ],
      "id": "0d76b98c-785a-47fd-9234-b6ea525b293d",
      "name": "Code3"
    },
    {
      "parameters": {
        "jsCode": "// Name: Map Google Ads Keyword Daily -> rows[]\nfunction s(x){ return x == null ? null : String(x); }\nfunction i(x){\n  if (x == null) return null;\n  const n = Number(String(x).replace(/[ ,]/g,''));\n  return Number.isFinite(n) ? Math.trunc(n) : null;\n}\nfunction f(x){\n  if (x == null) return null;\n  const n = Number(String(x).replace(/[ ,]/g,''));\n  return Number.isFinite(n) ? n : null;\n}\nfunction pick(obj, path){\n  return path.split('.').reduce((acc,k)=> (acc && acc[k]!==undefined) ? acc[k] : null, obj);\n}\n\nconst roots = items.flatMap(it =>\n  Array.isArray(it.json?.results) ? it.json.results : [it.json]\n).filter(Boolean);\n\nconst rows = [];\nfor (const r of roots){\n  const get = (p1,p2) => pick(r,p1) ?? pick(r,p2);\n\n  const date        = s(get('segments.date','segments.date'));\n  const customerId  = s(get('customer.id','customer.id'));\n  const campaignId  = s(get('campaign.id','campaign.id'));\n  const adGroupId   = s(get('adGroup.id','adGroup.id')) ?? s(get('ad_group.id','ad_group.id'));\n\n  const kwText      = s(get('adGroupCriterion.keyword.text','ad_group_criterion.keyword.text'));\n  const kwMatchType = s(get('adGroupCriterion.keyword.matchType','ad_group_criterion.keyword.match_type'));\n\n  const agcRes      = s(get('adGroupCriterion.resourceName','ad_group_criterion.resource_name'));\n  // resourceName вида: customers/{cust}/adGroupCriteria/{adGroupId}~{criterionId}\n  let adGroupCriterionId = null;\n  if (agcRes && agcRes.includes('~')) {\n    adGroupCriterionId = agcRes.split('~').pop();\n    if (adGroupCriterionId && /^\\d+$/.test(adGroupCriterionId)) {\n      // ok\n    } else {\n      adGroupCriterionId = null;\n    }\n  }\n\n  const m_impr   = i(get('metrics.impressions','metrics.impressions'));\n  const m_clicks = i(get('metrics.clicks','metrics.clicks'));\n  const m_cost   = i(get('metrics.costMicros','metrics.cost_micros'));\n  const m_cpc    = i(get('metrics.averageCpc','metrics.average_cpc')); // иногда отсутствует\n  const m_ctr    = f(get('metrics.ctr','metrics.ctr'));\n  const m_conv   = f(get('metrics.conversions','metrics.conversions'));\n  const m_all    = f(get('metrics.allConversions','metrics.all_conversions'));\n  const m_value  = f(get('metrics.conversionsValue','metrics.conversions_value'));\n\n  // обязательные для PK: date + ad_group_criterion_id\n  if (!date || !adGroupCriterionId) continue;\n\n  rows.push({\n    date: date,\n    customer_id: customerId ? Number(customerId) : null,\n    campaign_id: campaignId ? Number(campaignId) : null,\n    ad_group_id: adGroupId ? Number(adGroupId) : null,\n\n    ad_group_criterion_id: Number(adGroupCriterionId),\n    keyword_text: kwText,\n    keyword_match_type: kwMatchType, // EXACT/PHRASE/BROAD...\n\n    impressions: m_impr,\n    clicks: m_clicks,\n    cost_micros: m_cost,\n    average_cpc_micros: m_cpc,\n    ctr: m_ctr,\n    conversions: m_conv,\n    all_conversions: m_all,\n    conversions_value: m_value,\n\n    agc_resource_name: agcRes\n  });\n}\n\nreturn [{ json: { rows } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        496,
        720
      ],
      "id": "37e25e4d-5899-4945-8921-fc57cea01702",
      "name": "Code4"
    },
    {
      "parameters": {
        "jsCode": "// Name: Map Google Ads Conversion Action Daily (FROM ad_group) -> rows[]\nfunction s(x){ return x == null ? null : String(x); }\nfunction i(x){ if (x == null) return null; const n=Number(String(x).replace(/[ ,]/g,'')); return Number.isFinite(n)?Math.trunc(n):null; }\nfunction f(x){ if (x == null) return null; const n=Number(String(x).replace(/[ ,]/g,'')); return Number.isFinite(n)?n:null; }\nfunction pick(o,p){ return p.split('.').reduce((a,k)=> (a&&a[k]!==undefined)?a[k]:null, o); }\n\n// Собираем results из searchStream\nconst roots=[];\nfor (const it of items){\n  const j=it?.json;\n  if (Array.isArray(j?.results)) roots.push(...j.results);\n  else if (Array.isArray(j)) for (const pack of j){ if (Array.isArray(pack?.results)) roots.push(...pack.results); else if (pack&&typeof pack==='object') roots.push(pack); }\n  else if (j&&typeof j==='object') roots.push(j);\n}\n\n// Парсим resource_name вида: customers/{cust}/conversionActions/{id}\nfunction parseConversionActionId(res){\n  if (!res) return null;\n  const m = String(res).match(/conversionActions\\/(\\d+)/i);\n  return m ? Number(m[1]) : null;\n}\n\nconst rows=[];\nfor (const r of roots){\n  const get=(p1,p2)=> pick(r,p1) ?? pick(r,p2);\n\n  const date   = s(get('segments.date','segments.date'));\n  const custId = s(get('customer.id','customer.id'));\n  const campId = s(get('campaign.id','campaign.id'));\n  const agId   = s(get('adGroup.id','ad_group.id'));\n\n  const caRes  = s(get('segments.conversionAction','segments.conversion_action'));\n  const caCat  = s(get('segments.conversionActionCategory','segments.conversion_action_category'));\n  const caId   = parseConversionActionId(caRes);\n\n  const conv       = f(get('metrics.conversions','metrics.conversions'));\n  const allConv    = f(get('metrics.allConversions','metrics.all_conversions'));\n  const convValue  = f(get('metrics.conversionsValue','metrics.conversions_value'));\n  const valPerAll  = f(get('metrics.valuePerAllConversions','metrics.value_per_all_conversions'));\n\n  if (!date || !campId || !caId) continue;\n\n  rows.push({\n    date: date,\n    customer_id: custId ? Number(custId) : null,\n    campaign_id: Number(campId),\n    ad_group_id: agId ? (agId === '0' ? null : Number(agId)) : null,\n\n    conversion_action_id: caId,\n    conversion_action_category: caCat,\n    conversion_action_resource_name: caRes,\n\n    conversions: conv,\n    all_conversions: allConv,\n    conversions_value: convValue,\n    value_per_all_conversions: valPerAll,\n  });\n}\n\nreturn [{ json: { rows } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        496,
        944
      ],
      "id": "eb998445-51d1-477f-8287-658fbefe9603",
      "name": "Code5"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://googleads.googleapis.com/v19/customers/9489629233/googleAds:searchStream",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "developer-token",
              "value": "2SAsiKGexr_TCjkTKZDfBw"
            },
            {
              "name": "login-customer-id",
              "value": "5717046696"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"query\": `SELECT\n              segments.date,\n              customer.id,\n              campaign.id,\n              ad_group.id,\n              segments.conversion_action,\n              segments.conversion_action_category,\n              metrics.conversions,\n              metrics.all_conversions,\n              metrics.conversions_value,\n              metrics.value_per_all_conversions\n            FROM ad_group\n            WHERE segments.date BETWEEN '${$now.minus({ days: 7 }).format('yyyy-MM-dd')}'\n                                    AND '${$now.minus({ days: 1 }).format('yyyy-MM-dd')}'\n            LIMIT 10000`\n} }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        288,
        944
      ],
      "id": "a7d87322-0394-40ff-8e9c-97b8452149ea",
      "name": "searchStream",
      "alwaysOutputData": true,
      "credentials": {
        "googleAdsOAuth2Api": {
          "id": "9onxSlQLYIM6IzN5",
          "name": "Google Ads account 3"
        },
        "googleOAuth2Api": {
          "id": "x86qlO0wBjjZUtLa",
          "name": "Google account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH src AS (\n  SELECT *\n  FROM json_to_recordset($1::json) AS x(\n    date                            text,\n    customer_id                     text,\n    campaign_id                     text,\n    ad_group_id                     text,\n    conversion_action_id            text,\n    conversion_action_category      text,\n    conversion_action_resource_name text,\n    conversions                     text,\n    all_conversions                 text,\n    conversions_value               text,\n    value_per_all_conversions       text\n  )\n)\nINSERT INTO raw.google_ads_conv_action_daily AS t (\n  date, customer_id, campaign_id, ad_group_id,\n  conversion_action_id, conversion_action_category, conversion_action_resource_name,\n  conversions, all_conversions, conversions_value, value_per_all_conversions,\n  load_timestamp\n)\nSELECT\n  NULLIF(date,'')::date,\n  NULLIF(customer_id,'')::bigint,\n  NULLIF(campaign_id,'')::bigint,\n  NULLIF(ad_group_id,'')::bigint,\n  NULLIF(conversion_action_id,'')::bigint,\n  NULLIF(conversion_action_category,''),\n  NULLIF(conversion_action_resource_name,''),\n  NULLIF(conversions,'')::numeric,\n  NULLIF(all_conversions,'')::numeric,\n  NULLIF(conversions_value,'')::numeric,\n  NULLIF(value_per_all_conversions,'')::numeric,\n  now()\nFROM src\nWHERE NULLIF(date,'') IS NOT NULL\n  AND NULLIF(campaign_id,'') IS NOT NULL\n  AND NULLIF(conversion_action_id,'') IS NOT NULL\nON CONFLICT (conversion_action_id, campaign_id, ad_group_id, date) DO UPDATE\nSET\n  customer_id                     = COALESCE(EXCLUDED.customer_id, t.customer_id),\n  conversion_action_category      = COALESCE(EXCLUDED.conversion_action_category, t.conversion_action_category),\n  conversion_action_resource_name = COALESCE(EXCLUDED.conversion_action_resource_name, t.conversion_action_resource_name),\n  conversions                     = COALESCE(EXCLUDED.conversions, t.conversions),\n  all_conversions                 = COALESCE(EXCLUDED.all_conversions, t.all_conversions),\n  conversions_value               = COALESCE(EXCLUDED.conversions_value, t.conversions_value),\n  value_per_all_conversions       = COALESCE(EXCLUDED.value_per_all_conversions, t.value_per_all_conversions),\n  load_timestamp                  = now();",
        "options": {
          "queryReplacement": "=$1 = {{$json.rows}}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        704,
        944
      ],
      "id": "5b3667d3-8a6f-48b4-847d-d72cfda5aeba",
      "name": "raw.google_ads_conv_action_daily",
      "credentials": {
        "postgres": {
          "id": "vltYUx2Z4Q74JwSy",
          "name": "Final ITstep"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Name: Map Google Ads Conversion Actions DIM -> rows[]\nfunction s(x){ return x == null ? null : String(x); }\nfunction pick(o,p){ return p.split('.').reduce((a,k)=> (a&&a[k]!==undefined)?a[k]:null, o); }\n\nconst roots=[];\nfor (const it of items){\n  const j=it?.json;\n  if (Array.isArray(j?.results)) roots.push(...j.results);\n  else if (Array.isArray(j)) for (const pack of j){ if (Array.isArray(pack?.results)) roots.push(...pack.results); else if (pack&&typeof pack==='object') roots.push(pack); }\n  else if (j&&typeof j==='object') roots.push(j);\n}\n\nconst rows=[];\nfor (const r of roots){\n  const get=(p1,p2)=> pick(r,p1) ?? pick(r,p2);\n\n  const customer_id  = s(get('customer.id','customer.id'));\n  const res_name     = s(get('conversionAction.resourceName','conversion_action.resource_name'));\n  const id           = s(get('conversionAction.id','conversion_action.id'));\n  const name         = s(get('conversionAction.name','conversion_action.name'));\n  const status       = s(get('conversionAction.status','conversion_action.status'));\n  const category     = s(get('conversionAction.category','conversion_action.category'));\n  const primary      = get('conversionAction.primaryForGoal','conversion_action.primary_for_goal');\n\n  if (!id) continue;\n\n  rows.push({\n    customer_id: customer_id ? Number(customer_id) : null,\n    conversion_action_id: Number(id),\n    conversion_action_name: name,\n    conversion_action_status: status,\n    conversion_action_category: category,\n    primary_for_goal: primary === true || primary === 'true',\n    conversion_action_resource_name: res_name\n  });\n}\n\nreturn [{ json: { rows } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        496,
        1152
      ],
      "id": "15bf703b-2170-4e3c-b906-9c13fda6baf3",
      "name": "Code6"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH src AS (\n  SELECT *\n  FROM json_to_recordset($1::json) AS x(\n    customer_id                     text,\n    conversion_action_id            text,\n    conversion_action_name          text,\n    conversion_action_status        text,\n    conversion_action_category      text,\n    primary_for_goal                boolean,\n    conversion_action_resource_name text\n  )\n)\nINSERT INTO raw.google_ads_conversion_actions_dim AS t (\n  conversion_action_id,\n  customer_id,\n  conversion_action_name,\n  conversion_action_status,\n  conversion_action_category,\n  primary_for_goal,\n  conversion_action_resource_name,\n  load_timestamp\n)\nSELECT\n  NULLIF(conversion_action_id,'')::bigint,\n  NULLIF(customer_id,'')::bigint,\n  NULLIF(conversion_action_name,''),\n  NULLIF(conversion_action_status,''),\n  NULLIF(conversion_action_category,''),\n  COALESCE(primary_for_goal, false),\n  NULLIF(conversion_action_resource_name,''),\n  now()\nFROM src\nWHERE NULLIF(conversion_action_id,'') IS NOT NULL\nON CONFLICT (conversion_action_id) DO UPDATE\nSET\n  customer_id                     = COALESCE(EXCLUDED.customer_id, t.customer_id),\n  conversion_action_name          = COALESCE(EXCLUDED.conversion_action_name, t.conversion_action_name),\n  conversion_action_status        = COALESCE(EXCLUDED.conversion_action_status, t.conversion_action_status),\n  conversion_action_category      = COALESCE(EXCLUDED.conversion_action_category, t.conversion_action_category),\n  primary_for_goal                = COALESCE(EXCLUDED.primary_for_goal, t.primary_for_goal),\n  conversion_action_resource_name = COALESCE(EXCLUDED.conversion_action_resource_name, t.conversion_action_resource_name),\n  load_timestamp                  = now();",
        "options": {
          "queryReplacement": "=$1 = {{$json.rows}}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        704,
        1152
      ],
      "id": "a7866c9e-d816-4354-8ffa-c3e792d2ade8",
      "name": "raw.google_ads_conversion_actions_dim",
      "credentials": {
        "postgres": {
          "id": "vltYUx2Z4Q74JwSy",
          "name": "Final ITstep"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://googleads.googleapis.com/v19/customers/9489629233/googleAds:searchStream",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "developer-token",
              "value": "2SAsiKGexr_TCjkTKZDfBw"
            },
            {
              "name": "login-customer-id",
              "value": "5717046696"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"query\": `SELECT\n              customer.id,\n              conversion_action.resource_name,\n              conversion_action.id,\n              conversion_action.name,\n              conversion_action.status,\n              conversion_action.category,\n              conversion_action.primary_for_goal\n            FROM conversion_action\n            WHERE conversion_action.status != 'REMOVED'\n            LIMIT 10000`\n} }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        288,
        1152
      ],
      "id": "ddff39e4-8f8b-43bc-9bd3-298fc668a223",
      "name": "Conversion Actions",
      "alwaysOutputData": true,
      "credentials": {
        "googleAdsOAuth2Api": {
          "id": "9onxSlQLYIM6IzN5",
          "name": "Google Ads account 3"
        },
        "googleOAuth2Api": {
          "id": "x86qlO0wBjjZUtLa",
          "name": "Google account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Name: Map Google Ads Search Terms Daily -> rows[]\nfunction s(x){ return x == null ? null : String(x); }\nfunction i(x){\n  if (x == null) return null;\n  const n = Number(String(x).replace(/[ ,]/g,''));\n  return Number.isFinite(n) ? Math.trunc(n) : null;\n}\nfunction f(x){\n  if (x == null) return null;\n  const n = Number(String(x).replace(/[ ,]/g,''));\n  return Number.isFinite(n) ? n : null;\n}\nfunction pick(obj, path){\n  return path.split('.').reduce((acc,k)=> (acc && acc[k]!==undefined) ? acc[k] : null, obj);\n}\n\n// Собираем results из searchStream и возможных массивов чанков\nconst roots = [];\nfor (const it of items){\n  const j = it?.json;\n  if (Array.isArray(j?.results)) roots.push(...j.results);\n  else if (Array.isArray(j)) {\n    for (const pack of j){\n      if (Array.isArray(pack?.results)) roots.push(...pack.results);\n      else if (pack && typeof pack === 'object') roots.push(pack);\n    }\n  } else if (j && typeof j === 'object') roots.push(j);\n}\n\nconst rows = [];\nfor (const r of roots){\n  const get = (p1,p2) => pick(r,p1) ?? pick(r,p2);\n\n  const date       = s(get('segments.date','segments.date'));\n  const customerId = s(get('customer.id','customer.id'));\n  const campaignId = s(get('campaign.id','campaign.id'));\n  const adGroupId  = s(get('adGroup.id','ad_group.id'));\n\n  const searchTerm = s(get('searchTermView.searchTerm','search_term_view.search_term'));\n  const stStatus   = s(get('searchTermView.status','search_term_view.status'));\n\n  const m_impr   = i(get('metrics.impressions','metrics.impressions'));\n  const m_clicks = i(get('metrics.clicks','metrics.clicks'));\n  const m_cost   = i(get('metrics.costMicros','metrics.cost_micros'));\n  const m_cpc    = i(get('metrics.averageCpc','metrics.average_cpc'));\n  const m_ctr    = f(get('metrics.ctr','metrics.ctr'));\n  const m_conv   = f(get('metrics.conversions','metrics.conversions'));\n  const m_all    = f(get('metrics.allConversions','metrics.all_conversions'));\n  const m_value  = f(get('metrics.conversionsValue','metrics.conversions_value'));\n\n  // PK будем держать на (date, campaign_id, ad_group_id, search_term)\n  if (!date || !campaignId || !adGroupId || !searchTerm) continue;\n\n  rows.push({\n    date: date,\n    customer_id: customerId ? Number(customerId) : null,\n    campaign_id: Number(campaignId),\n    ad_group_id: Number(adGroupId),\n\n    search_term: searchTerm,\n    search_term_status: stStatus,\n\n    impressions: m_impr,\n    clicks: m_clicks,\n    cost_micros: m_cost,\n    average_cpc_micros: m_cpc,\n    ctr: m_ctr,\n    conversions: m_conv,\n    all_conversions: m_all,\n    conversions_value: m_value,\n  });\n}\n\nreturn [{ json: { rows } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        496,
        1376
      ],
      "id": "afe0b2c7-30b1-449b-ad21-3daec67d0dc4",
      "name": "Code7"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://googleads.googleapis.com/v19/customers/9489629233/googleAds:searchStream",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "developer-token",
              "value": "2SAsiKGexr_TCjkTKZDfBw"
            },
            {
              "name": "login-customer-id",
              "value": "5717046696"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"query\": `SELECT\n              segments.date,\n              customer.id,\n              campaign.id,\n              ad_group.id,\n              search_term_view.search_term,\n              search_term_view.status,\n              metrics.impressions,\n              metrics.clicks,\n              metrics.conversions,\n              metrics.all_conversions,\n              metrics.conversions_value,\n              metrics.cost_micros,\n              metrics.average_cpc,\n              metrics.ctr\n            FROM search_term_view\n            WHERE segments.date BETWEEN '${$now.minus({ days: 7 }).format('yyyy-MM-dd')}'\n                                    AND '${$now.minus({ days: 1 }).format('yyyy-MM-dd')}'\n            LIMIT 10000`\n} }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        288,
        1376
      ],
      "id": "be838001-12ac-48a6-9288-dac29237855e",
      "name": "Search terms daily",
      "alwaysOutputData": true,
      "credentials": {
        "googleAdsOAuth2Api": {
          "id": "9onxSlQLYIM6IzN5",
          "name": "Google Ads account 3"
        },
        "googleOAuth2Api": {
          "id": "x86qlO0wBjjZUtLa",
          "name": "Google account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH src AS (\n  SELECT *\n  FROM json_to_recordset($1::json) AS x(\n    date                 text,\n    customer_id          text,\n    campaign_id          text,\n    ad_group_id          text,\n    search_term          text,\n    search_term_status   text,\n    impressions          text,\n    clicks               text,\n    cost_micros          text,\n    average_cpc_micros   text,\n    ctr                  text,\n    conversions          text,\n    all_conversions      text,\n    conversions_value    text\n  )\n)\nINSERT INTO raw.google_ads_search_terms_daily AS t (\n  date, customer_id, campaign_id, ad_group_id,\n  search_term, search_term_status,\n  impressions, clicks, cost_micros, average_cpc_micros, ctr,\n  conversions, all_conversions, conversions_value,\n  load_timestamp\n)\nSELECT\n  NULLIF(date,'')::date,\n  NULLIF(customer_id,'')::bigint,\n  NULLIF(campaign_id,'')::bigint,\n  NULLIF(ad_group_id,'')::bigint,\n  NULLIF(search_term,''),\n  NULLIF(search_term_status,''),\n  NULLIF(impressions,'')::bigint,\n  NULLIF(clicks,'')::bigint,\n  NULLIF(cost_micros,'')::bigint,\n  NULLIF(average_cpc_micros,'')::bigint,\n  NULLIF(ctr,'')::numeric,\n  NULLIF(conversions,'')::numeric,\n  NULLIF(all_conversions,'')::numeric,\n  NULLIF(conversions_value,'')::numeric,\n  now()\nFROM src\nWHERE NULLIF(date,'') IS NOT NULL\n  AND NULLIF(campaign_id,'') IS NOT NULL\n  AND NULLIF(ad_group_id,'') IS NOT NULL\n  AND NULLIF(search_term,'') IS NOT NULL\nON CONFLICT (date, campaign_id, ad_group_id, search_term) DO UPDATE\nSET\n  customer_id         = COALESCE(EXCLUDED.customer_id, t.customer_id),\n  search_term_status  = COALESCE(EXCLUDED.search_term_status, t.search_term_status),\n  impressions         = COALESCE(EXCLUDED.impressions, t.impressions),\n  clicks              = COALESCE(EXCLUDED.clicks, t.clicks),\n  cost_micros         = COALESCE(EXCLUDED.cost_micros, t.cost_micros),\n  average_cpc_micros  = COALESCE(EXCLUDED.average_cpc_micros, t.average_cpc_micros),\n  ctr                 = COALESCE(EXCLUDED.ctr, t.ctr),\n  conversions         = COALESCE(EXCLUDED.conversions, t.conversions),\n  all_conversions     = COALESCE(EXCLUDED.all_conversions, t.all_conversions),\n  conversions_value   = COALESCE(EXCLUDED.conversions_value, t.conversions_value),\n  load_timestamp      = now();",
        "options": {
          "queryReplacement": "=$1 = {{$json.rows}}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        704,
        1376
      ],
      "id": "8cea446e-5f46-4b6d-9e1a-7789dbe317a8",
      "name": "raw.google_ads_search_terms_daily",
      "credentials": {
        "postgres": {
          "id": "vltYUx2Z4Q74JwSy",
          "name": "Final ITstep"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Name: Map Google Ads Device×Hour Daily -> rows[]\nfunction s(x){ return x == null ? null : String(x); }\nfunction i(x){ if (x == null) return null; const n=Number(String(x).replace(/[ ,]/g,'')); return Number.isFinite(n)?Math.trunc(n):null; }\nfunction f(x){ if (x == null) return null; const n=Number(String(x).replace(/[ ,]/g,'')); return Number.isFinite(n)?n:null; }\nfunction pick(o,p){ return p.split('.').reduce((a,k)=> (a&&a[k]!==undefined)?a[k]:null, o); }\n\n// Разворачиваем результаты (searchStream может отдавать чанки)\nconst roots=[];\nfor (const it of items){\n  const j = it?.json;\n  if (Array.isArray(j?.results)) roots.push(...j.results);\n  else if (Array.isArray(j)) {\n    for (const pack of j){\n      if (Array.isArray(pack?.results)) roots.push(...pack.results);\n      else if (pack && typeof pack==='object') roots.push(pack);\n    }\n  } else if (j && typeof j==='object') roots.push(j);\n}\n\nconst rows=[];\nfor (const r of roots){\n  const date  = s(pick(r,'segments.date'));\n  const dow   = s(pick(r,'segments.dayOfWeek')) || s(pick(r,'segments.day_of_week'));\n  const hour  = i(pick(r,'segments.hour'));      // 0..23\n  const device= s(pick(r,'segments.device'));    // DESKTOP/MOBILE/TABLET/...\n  const cust  = s(pick(r,'customer.id'));\n  const camp  = s(pick(r,'campaign.id'));\n  const ag    = s(pick(r,'adGroup.id')) || s(pick(r,'ad_group.id'));\n\n  const m_impr   = i(pick(r,'metrics.impressions'));\n  const m_clicks = i(pick(r,'metrics.clicks'));\n  const m_cost   = i(pick(r,'metrics.costMicros')) || i(pick(r,'metrics.cost_micros'));\n  const m_cpc    = i(pick(r,'metrics.averageCpc')) || i(pick(r,'metrics.average_cpc'));\n  const m_ctr    = f(pick(r,'metrics.ctr'));\n  const m_conv   = f(pick(r,'metrics.conversions'));\n  const m_all    = f(pick(r,'metrics.allConversions')) || f(pick(r,'metrics.all_conversions'));\n  const m_value  = f(pick(r,'metrics.conversionsValue')) || f(pick(r,'metrics.conversions_value'));\n\n  // PK: (campaign_id, ad_group_id, date, device, day_of_week, hour)\n  if (!date || !camp || !ag || !device || dow == null || hour == null) continue;\n\n  rows.push({\n    date,\n    customer_id: cust ? Number(cust) : null,\n    campaign_id: Number(camp),\n    ad_group_id: Number(ag),\n\n    device,                 // строка-энум\n    day_of_week: dow,       // строка-энум (MONDAY..SUNDAY)\n    hour,                   // 0..23\n\n    impressions: m_impr,\n    clicks: m_clicks,\n    cost_micros: m_cost,\n    average_cpc_micros: m_cpc,\n    ctr: m_ctr,\n    conversions: m_conv,\n    all_conversions: m_all,\n    conversions_value: m_value,\n  });\n}\n\nreturn [{ json: { rows } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        496,
        1600
      ],
      "id": "e47ef541-e13c-447c-a08b-91d9491cd5b1",
      "name": "Code8"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH src AS (\n  SELECT *\n  FROM json_to_recordset($1::json) AS x(\n    date text, customer_id text, campaign_id text, ad_group_id text,\n    device text, day_of_week text, hour text,\n    impressions text, clicks text, cost_micros text,\n    conversions text, all_conversions text, conversions_value text\n  )\n),\nsrc_cast AS (\n  SELECT\n    NULLIF(date,'')::date AS date,\n    NULLIF(customer_id,'')::bigint AS customer_id,\n    NULLIF(campaign_id,'')::bigint AS campaign_id,\n    NULLIF(ad_group_id,'')::bigint AS ad_group_id,\n    NULLIF(device,'') AS device,\n    NULLIF(day_of_week,'') AS day_of_week,\n    NULLIF(hour,'')::int AS hour,\n    COALESCE(NULLIF(impressions,'')::bigint,0) AS impressions,\n    COALESCE(NULLIF(clicks,'')::bigint,0) AS clicks,\n    COALESCE(NULLIF(cost_micros,'')::bigint,0) AS cost_micros,\n    COALESCE(NULLIF(conversions,'')::numeric,0) AS conversions,\n    COALESCE(NULLIF(all_conversions,'')::numeric,0) AS all_conversions,\n    COALESCE(NULLIF(conversions_value,'')::numeric,0) AS conversions_value\n  FROM src\n  WHERE NULLIF(date,'') IS NOT NULL\n    AND NULLIF(campaign_id,'') IS NOT NULL\n    AND NULLIF(ad_group_id,'') IS NOT NULL\n    AND NULLIF(device,'') IS NOT NULL\n    AND NULLIF(day_of_week,'') IS NOT NULL\n    AND NULLIF(hour,'') IS NOT NULL\n),\nsrc_agg AS (\n  SELECT\n    date, customer_id, campaign_id, ad_group_id, device, day_of_week, hour,\n    SUM(impressions) AS impressions,\n    SUM(clicks) AS clicks,\n    SUM(cost_micros) AS cost_micros,\n    SUM(conversions) AS conversions,\n    SUM(all_conversions) AS all_conversions,\n    SUM(conversions_value) AS conversions_value,\n    CASE WHEN SUM(clicks) > 0 THEN (SUM(cost_micros) / SUM(clicks))::bigint END AS average_cpc_micros,\n    CASE WHEN SUM(impressions) > 0 THEN (SUM(clicks)::numeric / SUM(impressions)) END AS ctr\n  FROM src_cast\n  GROUP BY date, customer_id, campaign_id, ad_group_id, device, day_of_week, hour\n)\nINSERT INTO raw.google_ads_device_hour_daily AS t (\n  date, customer_id, campaign_id, ad_group_id, device, day_of_week, hour,\n  impressions, clicks, cost_micros, conversions, all_conversions, conversions_value,\n  average_cpc_micros, ctr, load_timestamp\n)\nSELECT\n  date, customer_id, campaign_id, ad_group_id, device, day_of_week, hour,\n  impressions, clicks, cost_micros, conversions, all_conversions, conversions_value,\n  average_cpc_micros, ctr, now()\nFROM src_agg\nON CONFLICT (campaign_id, ad_group_id, date, device, day_of_week, hour) DO UPDATE\nSET\n  customer_id        = COALESCE(EXCLUDED.customer_id, t.customer_id),\n  impressions        = COALESCE(EXCLUDED.impressions, t.impressions),\n  clicks             = COALESCE(EXCLUDED.clicks, t.clicks),\n  cost_micros        = COALESCE(EXCLUDED.cost_micros, t.cost_micros),\n  conversions        = COALESCE(EXCLUDED.conversions, t.conversions),\n  all_conversions    = COALESCE(EXCLUDED.all_conversions, t.all_conversions),\n  conversions_value  = COALESCE(EXCLUDED.conversions_value, t.conversions_value),\n  average_cpc_micros = COALESCE(EXCLUDED.average_cpc_micros, t.average_cpc_micros),\n  ctr                = COALESCE(EXCLUDED.ctr, t.ctr),\n  load_timestamp     = now();",
        "options": {
          "queryReplacement": "=$1 = {{$json.rows}}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        704,
        1600
      ],
      "id": "56c4adaf-dcf3-42d1-a8d3-4a1012122281",
      "name": "raw.google_ads_device_hour_daily",
      "credentials": {
        "postgres": {
          "id": "vltYUx2Z4Q74JwSy",
          "name": "Final ITstep"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Name: Map PMax Asset Group Assets Daily -> rows[]\nfunction s(x){ return x == null ? null : String(x); }\nfunction pick(o,p){ return p.split('.').reduce((a,k)=> (a && a[k] !== undefined) ? a[k] : null, o); }\n\n// Соберём results из searchStream и возможных чанков\nconst roots = [];\nfor (const it of items){\n  const j = it?.json;\n  if (Array.isArray(j?.results)) roots.push(...j.results);\n  else if (Array.isArray(j)) {\n    for (const pack of j){\n      if (Array.isArray(pack?.results)) roots.push(...pack.results);\n      else if (pack && typeof pack === 'object') roots.push(pack);\n    }\n  } else if (j && typeof j === 'object') roots.push(j);\n}\n\nconst rows = [];\nfor (const r of roots){\n  const get = (p1,p2) => pick(r,p1) ?? pick(r,p2);\n\n  const date          = s(get('segments.date','segments.date'));\n  const customerId    = s(get('customer.id','customer.id'));\n  const campaignId    = s(get('campaign.id','campaign.id'));\n  const assetGroupId  = s(get('assetGroup.id','asset_group.id'));\n  const assetGroupName= s(get('assetGroup.name','asset_group.name'));\n  const assetGroupStatus = s(get('assetGroup.status','asset_group.status'));\n\n  const assetRes      = s(get('assetGroupAsset.asset','asset_group_asset.asset')); // resource name\n  const fieldType     = s(get('assetGroupAsset.fieldType','asset_group_asset.field_type'));\n  const perfLabel     = s(get('assetGroupAsset.performanceLabel','asset_group_asset.performance_label'));\n\n  // Парсим asset_id из resourceName вида: customers/{cust}/assets/{asset_id}\n  let assetId = null;\n  if (assetRes){\n    const m = assetRes.match(/\\/assets\\/(\\d+)/i);\n    if (m) assetId = m[1];\n  }\n\n  // обязательные для PK: date + asset_group_id + asset_id\n  if (!date || !assetGroupId || !assetId) continue;\n\n  rows.push({\n    date: date,                                // 'YYYY-MM-DD'\n    customer_id: customerId ? Number(customerId) : null,\n    campaign_id: campaignId ? Number(campaignId) : null,\n    asset_group_id: Number(assetGroupId),\n    asset_group_name: assetGroupName,\n    asset_group_status: assetGroupStatus,\n\n    asset_id: Number(assetId),\n    asset_resource_name: assetRes,\n    field_type: fieldType,                     // HEADLINE, DESCRIPTION, IMAGE, LOGO, YOUTUBE_VIDEO ...\n    performance_label: perfLabel               // LOW/GOOD/BEST/LEARNING/UNKNOWN\n  });\n}\n\nreturn [{ json: { rows } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        496,
        1824
      ],
      "id": "c7c2a2f5-6818-4a9d-ae5d-55e1fc23b346",
      "name": "Code9"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://googleads.googleapis.com/v19/customers/9489629233/googleAds:searchStream",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "developer-token",
              "value": "2SAsiKGexr_TCjkTKZDfBw"
            },
            {
              "name": "login-customer-id",
              "value": "5717046696"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"query\": `SELECT\n              segments.date,\n              customer.id,\n              campaign.id,\n              asset_group.id,\n              asset_group.name,\n              asset_group.status,\n              asset_group_asset.asset,\n              asset_group_asset.field_type,\n              asset_group_asset.performance_label\n            FROM asset_group_asset\n            WHERE segments.date BETWEEN '${$now.minus({ days: 7 }).format('yyyy-MM-dd')}'\n                                    AND '${$now.minus({ days: 1 }).format('yyyy-MM-dd')}'\n            LIMIT 10000`\n} }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        288,
        1824
      ],
      "id": "08f9bea7-985a-4aba-b811-2336cb0a0eed",
      "name": "PMax asset group assets",
      "alwaysOutputData": true,
      "credentials": {
        "googleAdsOAuth2Api": {
          "id": "9onxSlQLYIM6IzN5",
          "name": "Google Ads account 3"
        },
        "googleOAuth2Api": {
          "id": "x86qlO0wBjjZUtLa",
          "name": "Google account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH src AS (\n  SELECT *\n  FROM json_to_recordset($1::json) AS x(\n    date                 text,\n    customer_id          text,\n    campaign_id          text,\n    asset_group_id       text,\n    asset_group_name     text,\n    asset_group_status   text,\n    asset_id             text,\n    asset_resource_name  text,\n    field_type           text,\n    performance_label    text\n  )\n),\nsrc_cast AS (\n  SELECT\n    NULLIF(date,'')::date                   AS date,\n    NULLIF(customer_id,'')::bigint          AS customer_id,\n    NULLIF(campaign_id,'')::bigint          AS campaign_id,\n    NULLIF(asset_group_id,'')::bigint       AS asset_group_id,\n    NULLIF(asset_group_name,'')             AS asset_group_name,\n    NULLIF(asset_group_status,'')           AS asset_group_status,\n    NULLIF(asset_id,'')::bigint             AS asset_id,\n    NULLIF(asset_resource_name,'')          AS asset_resource_name,\n    NULLIF(field_type,'')                   AS field_type,\n    NULLIF(performance_label,'')            AS performance_label\n  FROM src\n  WHERE NULLIF(date,'') IS NOT NULL\n    AND NULLIF(asset_group_id,'') IS NOT NULL\n    AND NULLIF(asset_id,'') IS NOT NULL\n),\n-- на всякий случай устраним дубли внутри одного батча\nsrc_dedup AS (\n  SELECT\n    date, customer_id, campaign_id, asset_group_id,\n    MIN(asset_group_name)     AS asset_group_name,\n    MIN(asset_group_status)   AS asset_group_status,\n    asset_id,\n    MIN(asset_resource_name)  AS asset_resource_name,\n    MIN(field_type)           AS field_type,\n    MIN(performance_label)    AS performance_label\n  FROM src_cast\n  GROUP BY date, customer_id, campaign_id, asset_group_id, asset_id\n)\nINSERT INTO raw.google_ads_asset_group_asset_daily AS t (\n  date, customer_id, campaign_id, asset_group_id,\n  asset_group_name, asset_group_status,\n  asset_id, asset_resource_name, field_type, performance_label,\n  load_timestamp\n)\nSELECT\n  date, customer_id, campaign_id, asset_group_id,\n  asset_group_name, asset_group_status,\n  asset_id, asset_resource_name, field_type, performance_label,\n  now()\nFROM src_dedup\nON CONFLICT (asset_group_id, asset_id, date) DO UPDATE\nSET\n  customer_id         = COALESCE(EXCLUDED.customer_id, t.customer_id),\n  campaign_id         = COALESCE(EXCLUDED.campaign_id, t.campaign_id),\n  asset_group_name    = COALESCE(EXCLUDED.asset_group_name, t.asset_group_name),\n  asset_group_status  = COALESCE(EXCLUDED.asset_group_status, t.asset_group_status),\n  asset_resource_name = COALESCE(EXCLUDED.asset_resource_name, t.asset_resource_name),\n  field_type          = COALESCE(EXCLUDED.field_type, t.field_type),\n  performance_label   = COALESCE(EXCLUDED.performance_label, t.performance_label),\n  load_timestamp      = now();",
        "options": {
          "queryReplacement": "=$1 = {{$json.rows}}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        704,
        1824
      ],
      "id": "914d13b9-d795-4527-82cd-63480e6b18ca",
      "name": "raw.google_ads_asset_group_asset_daily",
      "credentials": {
        "postgres": {
          "id": "vltYUx2Z4Q74JwSy",
          "name": "Final ITstep"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://googleads.googleapis.com/v19/customers/9489629233/googleAds:searchStream",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "developer-token",
              "value": "2SAsiKGexr_TCjkTKZDfBw"
            },
            {
              "name": "login-customer-id",
              "value": "5717046696"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"query\": `SELECT\n              segments.date,\n              segments.day_of_week,\n              segments.hour,\n              segments.device,\n              customer.id,\n              campaign.id,\n              ad_group.id,\n              metrics.impressions,\n              metrics.clicks,\n              metrics.conversions,\n              metrics.all_conversions,\n              metrics.conversions_value,\n              metrics.cost_micros,\n              metrics.average_cpc,\n              metrics.ctr\n            FROM ad_group\n            WHERE segments.date BETWEEN '${$now.minus({ days: 7 }).format('yyyy-MM-dd')}'\n                                    AND '${$now.minus({ days: 1 }).format('yyyy-MM-dd')}'\n            LIMIT 10000`\n} }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        288,
        1600
      ],
      "id": "9db96f79-118f-4fd4-9c45-82e31bce6e8e",
      "name": "Search device daily1",
      "alwaysOutputData": true,
      "credentials": {
        "googleAdsOAuth2Api": {
          "id": "9onxSlQLYIM6IzN5",
          "name": "Google Ads account 3"
        },
        "googleOAuth2Api": {
          "id": "x86qlO0wBjjZUtLa",
          "name": "Google account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Name: Map PMax Asset Group Daily -> rows[]\nfunction s(x){ return x==null?null:String(x); }\nfunction i(x){ if(x==null) return null; const n=Number(String(x).replace(/[ ,]/g,'')); return Number.isFinite(n)?Math.trunc(n):null; }\nfunction f(x){ if(x==null) return null; const n=Number(String(x).replace(/[ ,]/g,'')); return Number.isFinite(n)?n:null; }\nfunction pick(o,p){ return p.split('.').reduce((a,k)=> (a&&a[k]!==undefined)?a[k]:null, o); }\n\n// unwrap results/searchStream\nconst roots=[];\nfor (const it of items){\n  const j=it?.json;\n  if (Array.isArray(j?.results)) roots.push(...j.results);\n  else if (Array.isArray(j)) for (const pack of j){ if (Array.isArray(pack?.results)) roots.push(...pack.results); else if (pack&&typeof pack==='object') roots.push(pack); }\n  else if (j&&typeof j==='object') roots.push(j);\n}\n\nconst rows=[];\nfor (const r of roots){\n  const date   = s(pick(r,'segments.date'));\n  const custId = s(pick(r,'customer.id'));\n  const campId = s(pick(r,'campaign.id'));\n  const agId   = s(pick(r,'assetGroup.id')) || s(pick(r,'asset_group.id'));\n  const name   = s(pick(r,'assetGroup.name')) || s(pick(r,'asset_group.name'));\n  const status = s(pick(r,'assetGroup.status')) || s(pick(r,'asset_group.status'));\n\n  const impr = i(pick(r,'metrics.impressions'));\n  const clk  = i(pick(r,'metrics.clicks'));\n  const cost = i(pick(r,'metrics.costMicros')) || i(pick(r,'metrics.cost_micros'));\n  const cpc  = i(pick(r,'metrics.averageCpc')) || i(pick(r,'metrics.average_cpc'));\n  const ctr  = f(pick(r,'metrics.ctr'));\n  const conv = f(pick(r,'metrics.conversions'));\n  const allc = f(pick(r,'metrics.all_conversions')) || f(pick(r,'metrics.allConversions'));\n  const val  = f(pick(r,'metrics.conversions_value')) || f(pick(r,'metrics.conversionsValue'));\n\n  if (!date || !agId) continue;\n\n  rows.push({\n    date: date,\n    customer_id: custId ? Number(custId) : null,\n    campaign_id: campId ? Number(campId) : null,\n    asset_group_id: Number(agId),\n    asset_group_name: name,\n    asset_group_status: status,\n\n    impressions: impr,\n    clicks: clk,\n    cost_micros: cost,\n    average_cpc_micros: cpc,\n    ctr: ctr,\n    conversions: conv,\n    all_conversions: allc,\n    conversions_value: val,\n  });\n}\n\nreturn [{ json: { rows } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        496,
        2048
      ],
      "id": "7013ad88-996c-4786-a2ff-c068762e98e3",
      "name": "Code10"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH src AS (\n  SELECT *\n  FROM json_to_recordset($1::json) AS x(\n    date                 text,\n    customer_id          text,\n    campaign_id          text,\n    asset_group_id       text,\n    asset_group_name     text,\n    asset_group_status   text,\n    impressions          text,\n    clicks               text,\n    cost_micros          text,\n    average_cpc_micros   text,\n    ctr                  text,\n    conversions          text,\n    all_conversions      text,\n    conversions_value    text\n  )\n)\nINSERT INTO raw.google_ads_asset_group_daily AS t (\n  date, customer_id, campaign_id, asset_group_id,\n  asset_group_name, asset_group_status,\n  impressions, clicks, cost_micros, average_cpc_micros, ctr,\n  conversions, all_conversions, conversions_value,\n  load_timestamp\n)\nSELECT\n  NULLIF(date,'')::date,\n  NULLIF(customer_id,'')::bigint,\n  NULLIF(campaign_id,'')::bigint,\n  NULLIF(asset_group_id,'')::bigint,\n  NULLIF(asset_group_name,''),\n  NULLIF(asset_group_status,''),\n  NULLIF(impressions,'')::bigint,\n  NULLIF(clicks,'')::bigint,\n  NULLIF(cost_micros,'')::bigint,\n  NULLIF(average_cpc_micros,'')::bigint,\n  NULLIF(ctr,'')::numeric,\n  NULLIF(conversions,'')::numeric,\n  NULLIF(all_conversions,'')::numeric,\n  NULLIF(conversions_value,'')::numeric,\n  now()\nFROM src\nWHERE NULLIF(date,'') IS NOT NULL\n  AND NULLIF(asset_group_id,'') IS NOT NULL\nON CONFLICT (asset_group_id, date) DO UPDATE\nSET\n  customer_id         = COALESCE(EXCLUDED.customer_id, t.customer_id),\n  campaign_id         = COALESCE(EXCLUDED.campaign_id, t.campaign_id),\n  asset_group_name    = COALESCE(EXCLUDED.asset_group_name, t.asset_group_name),\n  asset_group_status  = COALESCE(EXCLUDED.asset_group_status, t.asset_group_status),\n  impressions         = COALESCE(EXCLUDED.impressions, t.impressions),\n  clicks              = COALESCE(EXCLUDED.clicks, t.clicks),\n  cost_micros         = COALESCE(EXCLUDED.cost_micros, t.cost_micros),\n  average_cpc_micros  = COALESCE(EXCLUDED.average_cpc_micros, t.average_cpc_micros),\n  ctr                 = COALESCE(EXCLUDED.ctr, t.ctr),\n  conversions         = COALESCE(EXCLUDED.conversions, t.conversions),\n  all_conversions     = COALESCE(EXCLUDED.all_conversions, t.all_conversions),\n  conversions_value   = COALESCE(EXCLUDED.conversions_value, t.conversions_value),\n  load_timestamp      = now();",
        "options": {
          "queryReplacement": "=$1 = {{$json.rows}}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        704,
        2048
      ],
      "id": "1eee40df-701c-4859-9dad-06d8f300dc8d",
      "name": "raw.google_ads_asset_group_asset_daily1",
      "credentials": {
        "postgres": {
          "id": "vltYUx2Z4Q74JwSy",
          "name": "Final ITstep"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://googleads.googleapis.com/v19/customers/9489629233/googleAds:searchStream",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "developer-token",
              "value": "2SAsiKGexr_TCjkTKZDfBw"
            },
            {
              "name": "login-customer-id",
              "value": "5717046696"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"query\": `SELECT\n              segments.date,\n              customer.id,\n              campaign.id,\n              asset_group.id,\n              asset_group.name,\n              asset_group.status,\n              metrics.impressions,\n              metrics.clicks,\n              metrics.cost_micros,\n              metrics.conversions,\n              metrics.all_conversions,\n              metrics.conversions_value,\n              metrics.average_cpc,\n              metrics.ctr\n            FROM asset_group\n            WHERE segments.date BETWEEN '${$now.minus({ days: 7 }).format('yyyy-MM-dd')}'\n                                    AND '${$now.minus({ days: 1 }).format('yyyy-MM-dd')}'\n            LIMIT 10000`\n} }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        288,
        2048
      ],
      "id": "53530920-ca8f-47de-b5f9-d2305bd56c30",
      "name": "Asset Group",
      "alwaysOutputData": true,
      "credentials": {
        "googleAdsOAuth2Api": {
          "id": "9onxSlQLYIM6IzN5",
          "name": "Google Ads account 3"
        },
        "googleOAuth2Api": {
          "id": "x86qlO0wBjjZUtLa",
          "name": "Google account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH src AS (\n  SELECT *\n  FROM json_to_recordset($1::json) AS x(\n    date               text,\n    customer_id        text,\n    campaign_id        text,\n    ad_group_id        text,\n    ad_id              text,\n    ad_name            text,\n    ad_type            text,\n    final_urls         jsonb,\n    impressions        text,\n    clicks             text,\n    cost_micros        text,\n    average_cpc_micros text,\n    ctr                text,\n    conversions        text,\n    all_conversions    text,\n    conversions_value  text\n  )\n)\nINSERT INTO raw.google_ads_ad_daily AS t (\n  date, customer_id, campaign_id, ad_group_id, ad_id, ad_name, ad_type, final_urls,\n  impressions, clicks, cost_micros, average_cpc_micros, ctr,\n  conversions, all_conversions, conversions_value, load_timestamp\n)\nSELECT\n  NULLIF(date,'')::date,\n  NULLIF(customer_id,'')::bigint,\n  NULLIF(campaign_id,'')::bigint,\n  NULLIF(ad_group_id,'')::bigint,\n  NULLIF(ad_id,'')::bigint,\n  NULLIF(ad_name,''),\n  NULLIF(ad_type,''),\n  COALESCE(final_urls, '[]'::jsonb),\n  NULLIF(impressions,'')::bigint,\n  NULLIF(clicks,'')::bigint,\n  NULLIF(cost_micros,'')::bigint,\n  NULLIF(average_cpc_micros,'')::bigint,\n  NULLIF(ctr,'')::numeric,\n  NULLIF(conversions,'')::numeric,\n  NULLIF(all_conversions,'')::numeric,\n  NULLIF(conversions_value,'')::numeric,\n  now()\nFROM src\nWHERE NULLIF(date,'') IS NOT NULL AND NULLIF(ad_id,'') IS NOT NULL\nON CONFLICT (ad_id, date) DO UPDATE\nSET\n  customer_id        = COALESCE(EXCLUDED.customer_id, t.customer_id),\n  campaign_id        = COALESCE(EXCLUDED.campaign_id, t.campaign_id),\n  ad_group_id        = COALESCE(EXCLUDED.ad_group_id, t.ad_group_id),\n  ad_name            = COALESCE(EXCLUDED.ad_name, t.ad_name),\n  ad_type            = COALESCE(EXCLUDED.ad_type, t.ad_type),\n  final_urls         = COALESCE(EXCLUDED.final_urls, t.final_urls),\n  impressions        = COALESCE(EXCLUDED.impressions, t.impressions),\n  clicks             = COALESCE(EXCLUDED.clicks, t.clicks),\n  cost_micros        = COALESCE(EXCLUDED.cost_micros, t.cost_micros),\n  average_cpc_micros = COALESCE(EXCLUDED.average_cpc_micros, t.average_cpc_micros),\n  ctr                = COALESCE(EXCLUDED.ctr, t.ctr),\n  conversions        = COALESCE(EXCLUDED.conversions, t.conversions),\n  all_conversions    = COALESCE(EXCLUDED.all_conversions, t.all_conversions),\n  conversions_value  = COALESCE(EXCLUDED.conversions_value, t.conversions_value),\n  load_timestamp     = now();",
        "options": {
          "queryReplacement": "=$1 = {{$json.rows}}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        704,
        512
      ],
      "id": "6143ff9c-fbb8-403f-8aae-1d4b4ed27a7c",
      "name": "raw.google_ads_ad_daily.",
      "credentials": {
        "postgres": {
          "id": "vltYUx2Z4Q74JwSy",
          "name": "Final ITstep"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH src AS (\n  SELECT *\n  FROM json_to_recordset($1::json) AS x(\n    date                   text,\n    customer_id            text,\n    campaign_id            text,\n    ad_group_id            text,\n    ad_group_criterion_id  text,\n    keyword_text           text,\n    keyword_match_type     text,\n    impressions            text,\n    clicks                 text,\n    cost_micros            text,\n    average_cpc_micros     text,\n    ctr                    text,\n    conversions            text,\n    all_conversions        text,\n    conversions_value      text,\n    agc_resource_name      text\n  )\n)\nINSERT INTO raw.google_ads_keyword_daily AS t (\n  date, customer_id, campaign_id, ad_group_id, ad_group_criterion_id,\n  keyword_text, keyword_match_type,\n  impressions, clicks, cost_micros, average_cpc_micros, ctr,\n  conversions, all_conversions, conversions_value,\n  agc_resource_name, load_timestamp\n)\nSELECT\n  NULLIF(date,'')::date,\n  NULLIF(customer_id,'')::bigint,\n  NULLIF(campaign_id,'')::bigint,\n  NULLIF(ad_group_id,'')::bigint,\n  NULLIF(ad_group_criterion_id,'')::bigint,\n  NULLIF(keyword_text,''),\n  NULLIF(keyword_match_type,''),\n  NULLIF(impressions,'')::bigint,\n  NULLIF(clicks,'')::bigint,\n  NULLIF(cost_micros,'')::bigint,\n  NULLIF(average_cpc_micros,'')::bigint,\n  NULLIF(ctr,'')::numeric,\n  NULLIF(conversions,'')::numeric,\n  NULLIF(all_conversions,'')::numeric,\n  NULLIF(conversions_value,'')::numeric,\n  NULLIF(agc_resource_name,''),\n  now()\nFROM src\nWHERE NULLIF(date,'') IS NOT NULL\n  AND NULLIF(ad_group_criterion_id,'') IS NOT NULL\nON CONFLICT (ad_group_criterion_id, date) DO UPDATE\nSET\n  customer_id        = COALESCE(EXCLUDED.customer_id, t.customer_id),\n  campaign_id        = COALESCE(EXCLUDED.campaign_id, t.campaign_id),\n  ad_group_id        = COALESCE(EXCLUDED.ad_group_id, t.ad_group_id),\n  keyword_text       = COALESCE(EXCLUDED.keyword_text, t.keyword_text),\n  keyword_match_type = COALESCE(EXCLUDED.keyword_match_type, t.keyword_match_type),\n  impressions        = COALESCE(EXCLUDED.impressions, t.impressions),\n  clicks             = COALESCE(EXCLUDED.clicks, t.clicks),\n  cost_micros        = COALESCE(EXCLUDED.cost_micros, t.cost_micros),\n  average_cpc_micros = COALESCE(EXCLUDED.average_cpc_micros, t.average_cpc_micros),\n  ctr                = COALESCE(EXCLUDED.ctr, t.ctr),\n  conversions        = COALESCE(EXCLUDED.conversions, t.conversions),\n  all_conversions    = COALESCE(EXCLUDED.all_conversions, t.all_conversions),\n  conversions_value  = COALESCE(EXCLUDED.conversions_value, t.conversions_value),\n  agc_resource_name  = COALESCE(EXCLUDED.agc_resource_name, t.agc_resource_name),\n  load_timestamp     = now();",
        "options": {
          "queryReplacement": "=$1 = {{$json.rows}}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        704,
        720
      ],
      "id": "261280c2-1062-49e9-88a9-065eddd53e53",
      "name": "raw.google_ads_keyword_daily",
      "credentials": {
        "postgres": {
          "id": "vltYUx2Z4Q74JwSy",
          "name": "Final ITstep"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Name: Map Google Ads ASSET DIM -> rows[]\nfunction s(x){ return x == null ? null : String(x); }\nfunction i(x){\n  if (x == null) return null;\n  const n = Number(String(x).replace(/[ ,]/g,''));\n  return Number.isFinite(n) ? Math.trunc(n) : null;\n}\nfunction pick(obj, path){\n  return path.split('.').reduce((acc,k)=> (acc && acc[k] !== undefined) ? acc[k] : null, obj);\n}\n\n// Собираем results из searchStream/ search\nconst roots = [];\nfor (const it of items){\n  const j = it?.json;\n  if (Array.isArray(j?.results)) {\n    roots.push(...j.results);\n  } else if (Array.isArray(j)) {\n    for (const pack of j){\n      if (Array.isArray(pack?.results)) roots.push(...pack.results);\n      else if (pack && typeof pack === 'object') roots.push(pack);\n    }\n  } else if (j && typeof j === 'object') {\n    roots.push(j);\n  }\n}\n\nconst rows = [];\nfor (const r of roots){\n  // customer\n  const custId = s(pick(r,'customer.id')) || s(pick(r,'customerId')) || s(pick(r,'customer_id'));\n\n  // asset core\n  const res   = s(pick(r,'asset.resourceName')) || s(pick(r,'asset.resource_name'));\n  const aid   = s(pick(r,'asset.id'));\n  const atype = s(pick(r,'asset.type'));\n  const aname = s(pick(r,'asset.name'));\n\n  // specialized (TEXT, YOUTUBE_VIDEO, IMAGE)\n  const textVal = s(pick(r,'asset.textAsset.text')) || s(pick(r,'asset.text_asset.text'));\n  const ytId    = s(pick(r,'asset.youtubeVideoAsset.youtubeVideoId')) || s(pick(r,'asset.youtube_video_asset.youtube_video_id'));\n  const imgUrl  = s(pick(r,'asset.imageAsset.fullSize.url')) || s(pick(r,'asset.image_asset.full_size.url'));\n  const imgH    = i(pick(r,'asset.imageAsset.fullSize.heightPixels')) || i(pick(r,'asset.image_asset.full_size.height_pixels'));\n  const imgW    = i(pick(r,'asset.imageAsset.fullSize.widthPixels'))  || i(pick(r,'asset.image_asset.full_size.width_pixels'));\n\n  // SITELINK extras (в v19 нет final_urls в view asset)\n  const slText = s(pick(r,'asset.sitelinkAsset.linkText')) || s(pick(r,'asset.sitelink_asset.link_text'));\n  const slD1   = s(pick(r,'asset.sitelinkAsset.description1')) || s(pick(r,'asset.sitelink_asset.description1'));\n  const slD2   = s(pick(r,'asset.sitelinkAsset.description2')) || s(pick(r,'asset.sitelink_asset.description2'));\n\n  if (!aid) continue; // обязательный ключ\n\n  // Итоговые поля для DIM\n  rows.push({\n    asset_id: Number(aid),\n    customer_id: custId ? Number(custId) : null,\n    asset_resource_name: res || null,\n    asset_type: atype || null,\n    // name: берём asset.name, иначе хотя бы текст ссылки\n    asset_name: aname || slText || null,\n    // status в v19 из asset напрямую недоступен\n    asset_status: null,\n\n    // типоспецифичные:\n    // text_value: TEXT или SITELINK (склеим для быстрого поиска)\n    text_value: (textVal || [slText, slD1, slD2].filter(Boolean).join(' | ')) || null,\n    youtube_video_id: ytId || null,\n    image_url: imgUrl || null,\n    image_width_px: imgW ?? null,\n    image_height_px: imgH ?? null,\n\n    // sitelink детализировано в отдельные поля (новые колонки)\n    sitelink_link_text: slText || null,\n    sitelink_desc1:     slD1   || null,\n    sitelink_desc2:     slD2   || null,\n  });\n}\n\nreturn [{ json: { rows } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        512,
        2272
      ],
      "id": "796d1f0b-ca58-403f-92f3-89f1510343a8",
      "name": "Code11"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://googleads.googleapis.com/v19/customers/9489629233/googleAds:searchStream",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "developer-token",
              "value": "2SAsiKGexr_TCjkTKZDfBw"
            },
            {
              "name": "login-customer-id",
              "value": "5717046696"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { \n  \"query\": \"SELECT customer.id, asset.resource_name, asset.id, asset.type, asset.name, asset.text_asset.text, asset.youtube_video_asset.youtube_video_id, asset.image_asset.full_size.url, asset.image_asset.full_size.height_pixels, asset.image_asset.full_size.width_pixels, asset.sitelink_asset.link_text, asset.sitelink_asset.description1, asset.sitelink_asset.description2 FROM asset LIMIT 10000\" \n} }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        304,
        2272
      ],
      "id": "3268b29e-365e-498d-b5c1-5c9922fbb3f7",
      "name": "DIM asset",
      "alwaysOutputData": true,
      "credentials": {
        "googleAdsOAuth2Api": {
          "id": "9onxSlQLYIM6IzN5",
          "name": "Google Ads account 3"
        },
        "googleOAuth2Api": {
          "id": "x86qlO0wBjjZUtLa",
          "name": "Google account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH src AS (\n  SELECT *\n  FROM json_to_recordset($1::json) AS x(\n    asset_id             text,\n    customer_id          text,\n    asset_resource_name  text,\n    asset_type           text,\n    asset_name           text,\n    asset_status         text,\n    text_value           text,\n    youtube_video_id     text,\n    image_url            text,\n    image_width_px       text,\n    image_height_px      text,\n    sitelink_link_text   text,\n    sitelink_desc1       text,\n    sitelink_desc2       text\n  )\n)\nINSERT INTO raw.google_ads_asset_dim AS t (\n  asset_id,\n  customer_id,\n  asset_resource_name,\n  asset_type,\n  asset_name,\n  asset_status,\n  text_value,\n  youtube_video_id,\n  image_url,\n  image_width_px,\n  image_height_px,\n  sitelink_link_text,\n  sitelink_desc1,\n  sitelink_desc2,\n  load_timestamp\n)\nSELECT\n  NULLIF(asset_id,'')::bigint,\n  NULLIF(customer_id,'')::bigint,\n  NULLIF(asset_resource_name,''),\n  NULLIF(asset_type,''),\n  NULLIF(asset_name,''),\n  NULLIF(asset_status,''),\n  NULLIF(text_value,''),\n  NULLIF(youtube_video_id,''),\n  NULLIF(image_url,''),\n  NULLIF(image_width_px,'')::int,\n  NULLIF(image_height_px,'')::int,\n  NULLIF(sitelink_link_text,''),\n  NULLIF(sitelink_desc1,''),\n  NULLIF(sitelink_desc2,''),\n  now()\nFROM src\nWHERE NULLIF(asset_id,'') IS NOT NULL\nON CONFLICT (asset_id) DO UPDATE\nSET\n  customer_id         = COALESCE(EXCLUDED.customer_id, t.customer_id),\n  asset_resource_name = COALESCE(EXCLUDED.asset_resource_name, t.asset_resource_name),\n  asset_type          = COALESCE(EXCLUDED.asset_type, t.asset_type),\n  asset_name          = COALESCE(EXCLUDED.asset_name, t.asset_name),\n  asset_status        = COALESCE(EXCLUDED.asset_status, t.asset_status),\n  text_value          = COALESCE(EXCLUDED.text_value, t.text_value),\n  youtube_video_id    = COALESCE(EXCLUDED.youtube_video_id, t.youtube_video_id),\n  image_url           = COALESCE(EXCLUDED.image_url, t.image_url),\n  image_width_px      = COALESCE(EXCLUDED.image_width_px, t.image_width_px),\n  image_height_px     = COALESCE(EXCLUDED.image_height_px, t.image_height_px),\n  sitelink_link_text  = COALESCE(EXCLUDED.sitelink_link_text, t.sitelink_link_text),\n  sitelink_desc1      = COALESCE(EXCLUDED.sitelink_desc1, t.sitelink_desc1),\n  sitelink_desc2      = COALESCE(EXCLUDED.sitelink_desc2, t.sitelink_desc2),\n  load_timestamp      = now();",
        "options": {
          "queryReplacement": "=$1 = {{$json.rows}}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        720,
        2272
      ],
      "id": "bbd462c5-0abf-48a2-b04b-4809dbf000bf",
      "name": "raw.google_ads_asset_dim",
      "credentials": {
        "postgres": {
          "id": "vltYUx2Z4Q74JwSy",
          "name": "Final ITstep"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const arr = ($json?.results ?? $json?.row ?? items ?? []).map(x => x.json ?? x);\nconst seen = new Set();\nconst out = [];\nfor (const j of arr) {\n  const customerId   = j?.customer?.id ?? null;\n  const campaignId   = j?.campaign?.id ?? null;\n  const campaignName = j?.campaign?.name ?? null;\n  if (!customerId || !campaignId) continue;\n  const key = `${customerId}|${campaignId}|0|0`;\n  if (seen.has(key)) continue;\n  seen.add(key);\n  out.push({ json: {\n    customer_id: String(customerId),\n    campaign_id: String(campaignId),\n    campaign_name: campaignName ?? null,\n    ad_group_id: \"0\",\n    ad_group_name: null,\n    ad_id: \"0\",\n    ad_name: null\n  }});\n}\nreturn out;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        512,
        2480
      ],
      "id": "5935aa36-41a0-4ecd-8bf5-01fcf37a292f",
      "name": "Code12"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE UNIQUE INDEX IF NOT EXISTS ux_google_ads_names\n  ON raw.google_ads_names(customer_id, campaign_id, ad_group_id, ad_id);\n\nWITH input AS (\n  SELECT CASE\n           WHEN jsonb_typeof($1::jsonb) = 'array' THEN $1::jsonb\n           ELSE jsonb_build_array($1::jsonb)\n         END AS jb\n),\nsrc AS (\n  SELECT\n    NULLIF(j->>'customer_id','')::bigint AS customer_id,\n    NULLIF(j->>'campaign_id','')::bigint AS campaign_id,\n    NULLIF(j->>'campaign_name','')       AS campaign_name,\n    COALESCE(NULLIF(j->>'ad_group_id','')::bigint, 0) AS ad_group_id,\n    NULLIF(j->>'ad_group_name','')       AS ad_group_name,\n    COALESCE(NULLIF(j->>'ad_id','')::bigint, 0)       AS ad_id,\n    NULLIF(j->>'ad_name','')             AS ad_name\n  FROM input, LATERAL jsonb_array_elements(input.jb) AS j\n),\nclean AS (\n  SELECT DISTINCT\n    customer_id, campaign_id, campaign_name,\n    ad_group_id, ad_group_name,\n    ad_id, ad_name\n  FROM src\n  WHERE customer_id IS NOT NULL\n    AND campaign_id IS NOT NULL\n    AND ad_group_id IS NOT NULL\n    AND ad_id IS NOT NULL\n)\nINSERT INTO raw.google_ads_names (\n  customer_id, campaign_id, campaign_name,\n  ad_group_id, ad_group_name,\n  ad_id, ad_name,\n  load_timestamp\n)\nSELECT\n  customer_id, campaign_id, campaign_name,\n  ad_group_id, ad_group_name,\n  ad_id, ad_name,\n  now()\nFROM clean\nON CONFLICT (customer_id, campaign_id, ad_group_id, ad_id) DO UPDATE\nSET campaign_name  = COALESCE(EXCLUDED.campaign_name,  raw.google_ads_names.campaign_name),\n    ad_group_name  = COALESCE(EXCLUDED.ad_group_name,  raw.google_ads_names.ad_group_name),\n    ad_name        = COALESCE(EXCLUDED.ad_name,        raw.google_ads_names.ad_name),\n    load_timestamp = now();",
        "options": {
          "queryReplacement": "= $1 = {{$json}}."
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        736,
        2480
      ],
      "id": "f6acca2d-6664-4488-90a5-027b1721ae6f",
      "name": "raw.google_ads_names1",
      "credentials": {
        "postgres": {
          "id": "vltYUx2Z4Q74JwSy",
          "name": "Final ITstep"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const arr = ($json?.results ?? $json?.row ?? items ?? []).map(x => x.json ?? x);\nconst seen = new Set();\nconst out = [];\nfor (const j of arr) {\n  const customerId   = j?.customer?.id ?? null;\n  const campaignId   = j?.campaign?.id ?? null;\n  const campaignName = j?.campaign?.name ?? null;\n  const adGroupId    = j?.adGroup?.id ?? null;\n  const adGroupName  = j?.adGroup?.name ?? null;\n  if (!customerId || !campaignId || !adGroupId) continue;\n  const key = `${customerId}|${campaignId}|${adGroupId}|0`;\n  if (seen.has(key)) continue;\n  seen.add(key);\n  out.push({ json: {\n    customer_id: String(customerId),\n    campaign_id: String(campaignId),\n    campaign_name: campaignName ?? null,\n    ad_group_id: String(adGroupId),\n    ad_group_name: adGroupName ?? null,\n    ad_id: \"0\",\n    ad_name: null\n  }});\n}\nreturn out;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        512,
        2688
      ],
      "id": "05f5d2e8-c59a-43f8-a9c3-65c24da93abd",
      "name": "Code13"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE UNIQUE INDEX IF NOT EXISTS ux_google_ads_names\n  ON raw.google_ads_names(customer_id, campaign_id, ad_group_id, ad_id);\n\nWITH input AS (\n  SELECT CASE\n           WHEN jsonb_typeof($1::jsonb) = 'array' THEN $1::jsonb\n           ELSE jsonb_build_array($1::jsonb)\n         END AS jb\n),\nsrc AS (\n  SELECT\n    NULLIF(j->>'customer_id','')::bigint              AS customer_id,\n    NULLIF(j->>'campaign_id','')::bigint              AS campaign_id,\n    NULLIF(j->>'campaign_name','')                    AS campaign_name,\n    COALESCE(NULLIF(j->>'ad_group_id','')::bigint, 0) AS ad_group_id,\n    NULLIF(j->>'ad_group_name','')                    AS ad_group_name,\n    COALESCE(NULLIF(j->>'ad_id','')::bigint, 0)       AS ad_id,\n    NULLIF(j->>'ad_name','')                          AS ad_name\n  FROM input, LATERAL jsonb_array_elements(input.jb) AS j\n),\nclean AS (\n  SELECT DISTINCT\n    customer_id, campaign_id, campaign_name,\n    ad_group_id, ad_group_name,\n    ad_id, ad_name\n  FROM src\n  WHERE customer_id IS NOT NULL\n    AND campaign_id IS NOT NULL\n    -- ad_group_id/ad_id допускаем 0 как валидный “уровень”\n)\nINSERT INTO raw.google_ads_names AS t (\n  customer_id, campaign_id, campaign_name,\n  ad_group_id, ad_group_name,\n  ad_id, ad_name, load_timestamp\n)\nSELECT\n  customer_id, campaign_id, campaign_name,\n  ad_group_id, ad_group_name,\n  ad_id, ad_name, now()\nFROM clean\nON CONFLICT (customer_id, campaign_id, ad_group_id, ad_id) DO UPDATE\nSET campaign_name  = COALESCE(EXCLUDED.campaign_name,  t.campaign_name),\n    ad_group_name  = COALESCE(EXCLUDED.ad_group_name,  t.ad_group_name),\n    ad_name        = COALESCE(EXCLUDED.ad_name,        t.ad_name),\n    load_timestamp = now();",
        "options": {
          "queryReplacement": "= $1 = {{$json}}."
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        720,
        2688
      ],
      "id": "b36d5718-cecb-4baa-b662-222f4d00784d",
      "name": "raw.google_ads_names2",
      "credentials": {
        "postgres": {
          "id": "vltYUx2Z4Q74JwSy",
          "name": "Final ITstep"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE UNIQUE INDEX IF NOT EXISTS ux_google_ads_names\n  ON raw.google_ads_names(customer_id, campaign_id, ad_group_id, ad_id);\n\nWITH input AS (\n  SELECT CASE\n           WHEN jsonb_typeof($1::jsonb) = 'array' THEN $1::jsonb\n           ELSE jsonb_build_array($1::jsonb)\n         END AS jb\n),\nsrc AS (\n  SELECT\n    NULLIF(j->>'customer_id','')::bigint              AS customer_id,\n    NULLIF(j->>'campaign_id','')::bigint              AS campaign_id,\n    NULLIF(j->>'campaign_name','')                    AS campaign_name,\n    COALESCE(NULLIF(j->>'ad_group_id','')::bigint, 0) AS ad_group_id,\n    NULLIF(j->>'ad_group_name','')                    AS ad_group_name,\n    COALESCE(NULLIF(j->>'ad_id','')::bigint, 0)       AS ad_id,\n    NULLIF(j->>'ad_name','')                          AS ad_name\n  FROM input, LATERAL jsonb_array_elements(input.jb) AS j\n),\nclean AS (\n  SELECT DISTINCT\n    customer_id, campaign_id, campaign_name,\n    ad_group_id, ad_group_name,\n    ad_id, ad_name\n  FROM src\n  WHERE customer_id IS NOT NULL\n    AND campaign_id IS NOT NULL\n    -- ad_group_id/ad_id допускаем 0 как валидный “уровень”\n)\nINSERT INTO raw.google_ads_names AS t (\n  customer_id, campaign_id, campaign_name,\n  ad_group_id, ad_group_name,\n  ad_id, ad_name, load_timestamp\n)\nSELECT\n  customer_id, campaign_id, campaign_name,\n  ad_group_id, ad_group_name,\n  ad_id, ad_name, now()\nFROM clean\nON CONFLICT (customer_id, campaign_id, ad_group_id, ad_id) DO UPDATE\nSET campaign_name  = COALESCE(EXCLUDED.campaign_name,  t.campaign_name),\n    ad_group_name  = COALESCE(EXCLUDED.ad_group_name,  t.ad_group_name),\n    ad_name        = COALESCE(EXCLUDED.ad_name,        t.ad_name),\n    load_timestamp = now();",
        "options": {
          "queryReplacement": "= $1 = {{$json}}."
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        720,
        2880
      ],
      "id": "c4fe85f7-c7df-463e-87cf-9d2a3ac8c7e6",
      "name": "raw.google_ads_names3",
      "credentials": {
        "postgres": {
          "id": "vltYUx2Z4Q74JwSy",
          "name": "Final ITstep"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://googleads.googleapis.com/v19/customers/9489629233/googleAds:searchStream",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "developer-token",
              "value": "2SAsiKGexr_TCjkTKZDfBw"
            },
            {
              "name": "login-customer-id",
              "value": "5717046696"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ ({ query: \"SELECT customer.id, campaign.id, campaign.name, campaign.status FROM campaign WHERE campaign.status IN (ENABLED, PAUSED, REMOVED) LIMIT 100000\" }) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        304,
        2480
      ],
      "id": "00c31481-f0e1-41e5-b91a-9e086684461d",
      "name": "Кампании",
      "alwaysOutputData": true,
      "credentials": {
        "googleAdsOAuth2Api": {
          "id": "9onxSlQLYIM6IzN5",
          "name": "Google Ads account 3"
        },
        "googleOAuth2Api": {
          "id": "x86qlO0wBjjZUtLa",
          "name": "Google account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://googleads.googleapis.com/v19/customers/9489629233/googleAds:searchStream",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "developer-token",
              "value": "2SAsiKGexr_TCjkTKZDfBw"
            },
            {
              "name": "login-customer-id",
              "value": "5717046696"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ ({ query: \"SELECT customer.id, campaign.id, campaign.name, ad_group.id, ad_group.name FROM ad_group WHERE campaign.status IN (ENABLED, PAUSED, REMOVED) AND ad_group.status IN (ENABLED, PAUSED, REMOVED) LIMIT 100000\" }) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        304,
        2688
      ],
      "id": "cccdfb6a-9891-4cdb-b6d8-72abcc1e69c0",
      "name": "Адгруппы",
      "alwaysOutputData": true,
      "credentials": {
        "googleAdsOAuth2Api": {
          "id": "9onxSlQLYIM6IzN5",
          "name": "Google Ads account 3"
        },
        "googleOAuth2Api": {
          "id": "x86qlO0wBjjZUtLa",
          "name": "Google account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const arr = ($json?.results ?? $json?.row ?? items ?? []).map(x => x.json ?? x);\nconst seen = new Set();\nconst out = [];\nfor (const j of arr) {\n  const customerId   = j?.customer?.id ?? null;\n  const campaignId   = j?.campaign?.id ?? null;\n  const campaignName = j?.campaign?.name ?? null;\n  const adGroupId    = j?.adGroup?.id ?? null;\n  const adGroupName  = j?.adGroup?.name ?? null;\n  const adId         = j?.adGroupAd?.ad?.id ?? null;\n  const adName       = j?.adGroupAd?.ad?.name ?? null;\n  if (!customerId || !campaignId || !adGroupId || !adId) continue;\n  const key = `${customerId}|${campaignId}|${adGroupId}|${adId}`;\n  if (seen.has(key)) continue;\n  seen.add(key);\n  out.push({ json: {\n    customer_id: String(customerId),\n    campaign_id: String(campaignId),\n    campaign_name: campaignName ?? null,\n    ad_group_id: String(adGroupId),\n    ad_group_name: adGroupName ?? null,\n    ad_id: String(adId),\n    ad_name: adName ?? null\n  }});\n}\nreturn out;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        512,
        2880
      ],
      "id": "60476cb1-66e5-4aea-b830-bc4dc8e53c4f",
      "name": "Code14"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://googleads.googleapis.com/v19/customers/9489629233/googleAds:searchStream",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "developer-token",
              "value": "2SAsiKGexr_TCjkTKZDfBw"
            },
            {
              "name": "login-customer-id",
              "value": "5717046696"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ ({ query: \"SELECT customer.id, campaign.id, campaign.name, ad_group.id, ad_group.name, ad_group_ad.ad.id, ad_group_ad.ad.name FROM ad_group_ad WHERE campaign.status IN (ENABLED, PAUSED, REMOVED) AND ad_group.status IN (ENABLED, PAUSED, REMOVED) AND ad_group_ad.status IN (ENABLED, PAUSED, REMOVED) LIMIT 100000\" }) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        304,
        2880
      ],
      "id": "25e0553e-fcb3-48f6-b8a5-46334e8fd018",
      "name": "Объявления",
      "alwaysOutputData": true,
      "credentials": {
        "googleAdsOAuth2Api": {
          "id": "9onxSlQLYIM6IzN5",
          "name": "Google Ads account 3"
        },
        "googleOAuth2Api": {
          "id": "x86qlO0wBjjZUtLa",
          "name": "Google account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Click log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click log": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "raw.google_ads_clicks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "raw.google_ads_clicks": {
      "main": [
        [
          {
            "node": "gads_campaign_daily (RAW)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "gads_campaign_daily (RAW)": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "raw.google_ads_campaign_daily",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "raw.google_ads_campaign_daily": {
      "main": [
        [
          {
            "node": "Ad daily",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ad daily": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "raw.google_ads_ad_daily.",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Keyword daily": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "raw.google_ads_keyword_daily",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "raw.google_ads_conv_action_daily",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "searchStream": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code6": {
      "main": [
        [
          {
            "node": "raw.google_ads_conversion_actions_dim",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Conversion Actions": {
      "main": [
        [
          {
            "node": "Code6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "raw.google_ads_conv_action_daily": {
      "main": [
        [
          {
            "node": "Conversion Actions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code7": {
      "main": [
        [
          {
            "node": "raw.google_ads_search_terms_daily",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search terms daily": {
      "main": [
        [
          {
            "node": "Code7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "raw.google_ads_conversion_actions_dim": {
      "main": [
        [
          {
            "node": "Search terms daily",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code8": {
      "main": [
        [
          {
            "node": "raw.google_ads_device_hour_daily",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code9": {
      "main": [
        [
          {
            "node": "raw.google_ads_asset_group_asset_daily",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PMax asset group assets": {
      "main": [
        [
          {
            "node": "Code9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "raw.google_ads_search_terms_daily": {
      "main": [
        [
          {
            "node": "Search device daily1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "raw.google_ads_device_hour_daily": {
      "main": [
        [
          {
            "node": "PMax asset group assets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search device daily1": {
      "main": [
        [
          {
            "node": "Code8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code10": {
      "main": [
        [
          {
            "node": "raw.google_ads_asset_group_asset_daily1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Asset Group": {
      "main": [
        [
          {
            "node": "Code10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "raw.google_ads_asset_group_asset_daily": {
      "main": [
        [
          {
            "node": "Asset Group",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "raw.google_ads_ad_daily.": {
      "main": [
        [
          {
            "node": "Keyword daily",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "raw.google_ads_keyword_daily": {
      "main": [
        [
          {
            "node": "searchStream",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code11": {
      "main": [
        [
          {
            "node": "raw.google_ads_asset_dim",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DIM asset": {
      "main": [
        [
          {
            "node": "Code11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "raw.google_ads_asset_group_asset_daily1": {
      "main": [
        [
          {
            "node": "DIM asset",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "raw.google_ads_asset_dim": {
      "main": [
        [
          {
            "node": "Кампании",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code12": {
      "main": [
        [
          {
            "node": "raw.google_ads_names1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code13": {
      "main": [
        [
          {
            "node": "raw.google_ads_names2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "raw.google_ads_names1": {
      "main": [
        [
          {
            "node": "Адгруппы",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "raw.google_ads_names2": {
      "main": [
        [
          {
            "node": "Объявления",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Кампании": {
      "main": [
        [
          {
            "node": "Code12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Адгруппы": {
      "main": [
        [
          {
            "node": "Code13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code14": {
      "main": [
        [
          {
            "node": "raw.google_ads_names3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Объявления": {
      "main": [
        [
          {
            "node": "Code14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "4c629f24-ece3-4e49-9b80-108f4b652c98",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "540ab69109515f10dd49f8acf74edf7f1313658ee3ec59f626a0c42af55aceaf"
  },
  "id": "GihYtkd8WgyeuOmN",
  "tags": []
}