#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∞—É–¥–∏—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö itstep_final
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
–Ω–∞ –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö, –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
"""

import psycopg2
from psycopg2.extras import RealDictCursor
from datetime import datetime, timedelta
import json

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –∏–∑ VS Code)
DB_CONFIG = {
    'host': '92.242.60.211',
    'port': 5432,
    'database': 'itstep_final',
    'user': 'YOUR_USERNAME',  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à username –∏–∑ VS Code
    'password': 'YOUR_PASSWORD'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à password –∏–∑ VS Code
}

class DatabaseAuditor:
    def __init__(self, config):
        self.config = config
        self.conn = None
        self.issues = []

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.conn = psycopg2.connect(**self.config)
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {self.config['database']}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            raise

    def get_all_schemas(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ö–µ–º"""
        query = """
        SELECT schema_name
        FROM information_schema.schemata
        WHERE schema_name NOT IN ('pg_catalog', 'information_schema', 'pg_toast')
        ORDER BY schema_name;
        """
        with self.conn.cursor(cursor_factory=RealDictCursor) as cur:
            cur.execute(query)
            return [row['schema_name'] for row in cur.fetchall()]

    def get_tables_info(self, schema):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–∞—Ö –≤ —Å—Ö–µ–º–µ"""
        query = """
        SELECT
            schemaname,
            tablename,
            pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as total_size,
            pg_total_relation_size(schemaname||'.'||tablename) as size_bytes
        FROM pg_tables
        WHERE schemaname = %s
        ORDER BY tablename;
        """
        with self.conn.cursor(cursor_factory=RealDictCursor) as cur:
            cur.execute(query, (schema,))
            return cur.fetchall()

    def get_views_info(self, schema):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è—Ö –≤ —Å—Ö–µ–º–µ"""
        query = """
        SELECT
            schemaname,
            viewname,
            definition
        FROM pg_views
        WHERE schemaname = %s
        ORDER BY viewname;
        """
        with self.conn.cursor(cursor_factory=RealDictCursor) as cur:
            cur.execute(query, (schema,))
            return cur.fetchall()

    def get_matviews_info(self, schema):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è—Ö"""
        query = """
        SELECT
            schemaname,
            matviewname,
            pg_size_pretty(pg_total_relation_size(schemaname||'.'||matviewname)) as total_size,
            pg_total_relation_size(schemaname||'.'||matviewname) as size_bytes
        FROM pg_matviews
        WHERE schemaname = %s
        ORDER BY matviewname;
        """
        with self.conn.cursor(cursor_factory=RealDictCursor) as cur:
            cur.execute(query, (schema,))
            return cur.fetchall()

    def check_table_data(self, schema, table):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        issues = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è?
        query_count = f"SELECT COUNT(*) as cnt FROM {schema}.{table}"
        try:
            with self.conn.cursor(cursor_factory=RealDictCursor) as cur:
                cur.execute(query_count)
                count = cur.fetchone()['cnt']

                if count == 0:
                    issues.append({
                        'type': 'EMPTY_TABLE',
                        'severity': 'WARNING',
                        'schema': schema,
                        'object': table,
                        'message': f'–¢–∞–±–ª–∏—Ü–∞ {schema}.{table} –ø—É—Å—Ç–∞—è (0 –∑–∞–ø–∏—Å–µ–π)'
                    })

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ï—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–∞—Ç–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏?
                query_columns = f"""
                SELECT column_name, data_type
                FROM information_schema.columns
                WHERE table_schema = %s AND table_name = %s
                AND (data_type LIKE '%%timestamp%%' OR data_type = 'date' OR column_name ILIKE '%%date%%' OR column_name ILIKE '%%created%%' OR column_name ILIKE '%%updated%%')
                """
                cur.execute(query_columns, (schema, table))
                date_columns = cur.fetchall()

                if date_columns and count > 0:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–µ—Ä–≤–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ –¥–∞—Ç—ã
                    date_col = date_columns[0]['column_name']
                    query_max_date = f"SELECT MAX({date_col}) as max_date FROM {schema}.{table}"
                    cur.execute(query_max_date)
                    result = cur.fetchone()
                    max_date = result['max_date'] if result else None

                    if max_date:
                        days_old = (datetime.now() - max_date).days
                        if days_old > 7:  # –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ –Ω–µ–¥–µ–ª–∏
                            issues.append({
                                'type': 'OUTDATED_DATA',
                                'severity': 'WARNING',
                                'schema': schema,
                                'object': table,
                                'message': f'–î–∞–Ω–Ω—ã–µ –≤ {schema}.{table} —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞: {max_date} ({days_old} –¥–Ω–µ–π –Ω–∞–∑–∞–¥)'
                            })

        except Exception as e:
            issues.append({
                'type': 'QUERY_ERROR',
                'severity': 'ERROR',
                'schema': schema,
                'object': table,
                'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {schema}.{table}: {str(e)}'
            })

        return issues

    def check_view_dependencies(self, schema, view):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
        issues = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å SELECT –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è?
        query_test = f"SELECT * FROM {schema}.{view} LIMIT 1"
        try:
            with self.conn.cursor() as cur:
                cur.execute(query_test)
                cur.fetchone()
        except Exception as e:
            issues.append({
                'type': 'VIEW_ERROR',
                'severity': 'ERROR',
                'schema': schema,
                'object': view,
                'message': f'–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ {schema}.{view} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {str(e)}'
            })

        return issues

    def check_matview_freshness(self, schema, matview):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
        issues = []

        # –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
        query_stats = """
        SELECT
            last_autovacuum,
            last_autoanalyze
        FROM pg_stat_user_tables
        WHERE schemaname = %s AND relname = %s
        """

        try:
            with self.conn.cursor(cursor_factory=RealDictCursor) as cur:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ –º–∞—Ç–≤—å—é
                query_test = f"SELECT COUNT(*) as cnt FROM {schema}.{matview}"
                cur.execute(query_test)
                count = cur.fetchone()['cnt']

                if count == 0:
                    issues.append({
                        'type': 'EMPTY_MATVIEW',
                        'severity': 'WARNING',
                        'schema': schema,
                        'object': matview,
                        'message': f'–ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ {schema}.{matview} –ø—É—Å—Ç–æ–µ'
                    })

        except Exception as e:
            issues.append({
                'type': 'MATVIEW_ERROR',
                'severity': 'ERROR',
                'schema': schema,
                'object': matview,
                'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {schema}.{matview}: {str(e)}'
            })

        return issues

    def run_audit(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("\n" + "="*80)
        print("üîç –ê–£–î–ò–¢ –ë–ê–ó–´ –î–ê–ù–ù–´–• itstep_final")
        print("="*80 + "\n")

        self.connect()

        schemas = self.get_all_schemas()
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ö–µ–º: {len(schemas)}")
        print(f"   –°—Ö–µ–º—ã: {', '.join(schemas)}\n")

        total_tables = 0
        total_views = 0
        total_matviews = 0

        for schema in schemas:
            print(f"\n{'‚îÄ'*80}")
            print(f"üìÅ –°—Ö–µ–º–∞: {schema}")
            print(f"{'‚îÄ'*80}")

            # –¢–∞–±–ª–∏—Ü—ã
            tables = self.get_tables_info(schema)
            total_tables += len(tables)
            if tables:
                print(f"\n  üìã –¢–∞–±–ª–∏—Ü—ã ({len(tables)}):")
                for table in tables:
                    print(f"     ‚Ä¢ {table['tablename']:<40} {table['total_size']:>10}")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
                    table_issues = self.check_table_data(schema, table['tablename'])
                    self.issues.extend(table_issues)

            # –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            views = self.get_views_info(schema)
            total_views += len(views)
            if views:
                print(f"\n  üëÅÔ∏è  –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è ({len(views)}):")
                for view in views:
                    print(f"     ‚Ä¢ {view['viewname']}")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
                    view_issues = self.check_view_dependencies(schema, view['viewname'])
                    self.issues.extend(view_issues)

            # –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            matviews = self.get_matviews_info(schema)
            total_matviews += len(matviews)
            if matviews:
                print(f"\n  üíé –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è ({len(matviews)}):")
                for matview in matviews:
                    print(f"     ‚Ä¢ {matview['matviewname']:<40} {matview['total_size']:>10}")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –º–∞—Ç–≤—å—é
                    matview_issues = self.check_matview_freshness(schema, matview['matviewname'])
                    self.issues.extend(matview_issues)

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\n\n{'='*80}")
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print(f"{'='*80}")
        print(f"  –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü:                    {total_tables}")
        print(f"  –í—Å–µ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π:             {total_views}")
        print(f"  –í—Å–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π: {total_matviews}")
        print(f"  –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤:                  {total_tables + total_views + total_matviews}")

        # –ü—Ä–æ–±–ª–µ–º—ã
        print(f"\n\n{'='*80}")
        print("‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´")
        print(f"{'='*80}")

        if not self.issues:
            print("  ‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
        else:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É
            errors = [i for i in self.issues if i['severity'] == 'ERROR']
            warnings = [i for i in self.issues if i['severity'] == 'WARNING']

            print(f"\n  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏: {len(errors)}")
            for issue in errors:
                print(f"     [{issue['type']}] {issue['schema']}.{issue['object']}")
                print(f"        ‚Üí {issue['message']}")

            print(f"\n  ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {len(warnings)}")
            for issue in warnings:
                print(f"     [{issue['type']}] {issue['schema']}.{issue['object']}")
                print(f"        ‚Üí {issue['message']}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ JSON
        report = {
            'audit_date': datetime.now().isoformat(),
            'database': self.config['database'],
            'statistics': {
                'total_tables': total_tables,
                'total_views': total_views,
                'total_matviews': total_matviews,
                'total_objects': total_tables + total_views + total_matviews
            },
            'issues': self.issues
        }

        with open('db_audit_report.json', 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2, default=str)

        print(f"\n\nüìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: db_audit_report.json")

        self.conn.close()

if __name__ == '__main__':
    print("=" * 80)
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: itstep_final - –ê—É–¥–∏—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –≤–∏—Ç—Ä–∏–Ω")
    print("=" * 80)
    print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_USERNAME –∏ YOUR_PASSWORD –Ω–∞ –≤–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
    print("   –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VS Code\n")

    auditor = DatabaseAuditor(DB_CONFIG)
    auditor.run_audit()
