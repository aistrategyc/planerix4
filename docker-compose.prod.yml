version: '3.8'

networks:
  planerix-network:
    driver: bridge
    name: planerix-prod-network

volumes:
  postgres_prod_data:
    name: planerix-postgres-prod-data
  redis_prod_data:
    name: planerix-redis-prod-data
  api_logs:
    name: planerix-api-logs
  api_uploads:
    name: planerix-api-uploads
  caddy_data:
    name: planerix-caddy-data
  caddy_config:
    name: planerix-caddy-config
  lightrag_storage:
    name: planerix-lightrag-storage
  lightrag_tiktoken:
    name: planerix-lightrag-tiktoken

services:
  postgres:
    image: postgres:14
    container_name: planerix-postgres-prod
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - planerix-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: planerix-redis-prod
    restart: unless-stopped
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}", "--save", "900", "1", "--save", "300", "10"]
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_prod_data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a $$REDIS_PASSWORD ping | grep PONG || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - planerix-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  api:
    container_name: planerix-api-prod
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - .env.production
      - ./apps/api/.env.production
    environment:
      NODE_ENV: production
      POSTGRES_HOST: postgres
      REDIS_HOST: redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - api_logs:/app/logs
      - api_uploads:/app/uploads
    expose:
      - "8001"
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python - <<'PY'
          import sys, urllib.request
          try:
              r = urllib.request.urlopen('http://localhost:8001/api/health', timeout=10)
              sys.exit(0 if r.getcode() < 400 else 1)
          except Exception:
              sys.exit(1)
          PY
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - planerix-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  web:
    container_name: planerix-web-prod
    build:
      context: ./apps/web-enterprise
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: https://api.${MAIN_DOMAIN}/api
        NEXT_PUBLIC_API_PREFIX: /api
        NODE_ENV: production
    restart: unless-stopped
    env_file:
      - ./apps/web-enterprise/.env.production
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://api.${MAIN_DOMAIN}/api
      NEXT_PUBLIC_API_PREFIX: /api
      INTERNAL_API_URL: http://api:8001/api
    depends_on:
      api:
        condition: service_healthy
    expose:
      - "3001"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - planerix-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  landing:
    container_name: planerix-landing-prod
    build:
      context: ./apps/planerix
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: https://api.${MAIN_DOMAIN}/api
        NEXT_PUBLIC_API_PREFIX: /api
        NODE_ENV: production
    restart: unless-stopped
    env_file:
      - ./apps/planerix/.env.production
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://api.${MAIN_DOMAIN}/api
      NEXT_PUBLIC_API_PREFIX: /api
    depends_on:
      api:
        condition: service_healthy
    expose:
      - "3000"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - planerix-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  lightrag:
    image: ghcr.io/hkuds/lightrag:latest
    container_name: planerix-lightrag-prod
    restart: unless-stopped
    env_file:
      - .env.lightrag
    volumes:
      - lightrag_storage:/app/data/rag_storage
      - lightrag_tiktoken:/app/data/tiktoken
    expose:
      - "9621"
    environment:
      TIKTOKEN_CACHE_DIR: /app/data/tiktoken
      HOST: 0.0.0.0
      PORT: 9621
    networks:
      - planerix-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  caddy:
    image: caddy:2-alpine
    container_name: planerix-caddy-prod
    restart: unless-stopped
    env_file:
      - .env.production
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      api:
        condition: service_healthy
      web:
        condition: service_healthy
      landing:
        condition: service_healthy
    environment:
      MAIN_DOMAIN: ${MAIN_DOMAIN}
      APP_DOMAIN: ${APP_DOMAIN}
      API_DOMAIN: ${API_DOMAIN}
      SSL_EMAIL: ${SSL_EMAIL}
      RAG_DOMAIN: ${RAG_DOMAIN}
    networks:
      - planerix-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
